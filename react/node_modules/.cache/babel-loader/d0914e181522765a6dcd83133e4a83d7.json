{"ast":null,"code":"/*\r\nCopyright (c) 2012, Adam Phillabaum, Chris Umbel\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nUnless otherwise stated by a specific section of code\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n*/\n// Computes the Jaro distance between two string -- intrepreted from:\n// http://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance\n// s1 is the first string to compare\n// s2 is the second string to compare\nfunction distance(s1, s2) {\n  if (typeof s1 != \"string\" || typeof s2 != \"string\") return 0;\n  if (s1.length == 0 || s2.length == 0) return 0;\n  s1 = s1.toLowerCase(), s2 = s2.toLowerCase();\n  var matchWindow = Math.floor(Math.max(s1.length, s2.length) / 2.0) - 1;\n  var matches1 = new Array(s1.length);\n  var matches2 = new Array(s2.length);\n  var m = 0; // number of matches\n\n  var t = 0; // number of transpositions\n  //debug helpers\n  //console.log(\"s1: \" + s1 + \"; s2: \" + s2);\n  //console.log(\" - matchWindow: \" + matchWindow);\n  // find matches\n\n  for (var i = 0; i < s1.length; i++) {\n    var matched = false; // check for an exact match\n\n    if (s1[i] == s2[i]) {\n      matches1[i] = matches2[i] = matched = true;\n      m++;\n    } // check the \"match window\"\n    else {\n        // this for loop is a little brutal\n        for (k = i <= matchWindow ? 0 : i - matchWindow; k <= i + matchWindow && k < s2.length && !matched; k++) {\n          if (s1[i] == s2[k]) {\n            if (!matches1[i] && !matches2[k]) {\n              m++;\n            }\n\n            matches1[i] = matches2[k] = matched = true;\n          }\n        }\n      }\n  }\n\n  if (m == 0) return 0.0; // count transpositions\n\n  var k = 0;\n\n  for (var i = 0; i < s1.length; i++) {\n    if (matches1[k]) {\n      while (!matches2[k] && k < matches2.length) k++;\n\n      if (s1[i] != s2[k] && k < matches2.length) {\n        t++;\n      }\n\n      k++;\n    }\n  } //debug helpers:\n  //console.log(\" - matches: \" + m);\n  //console.log(\" - transpositions: \" + t);\n\n\n  t = t / 2.0;\n  return (m / s1.length + m / s2.length + (m - t) / m) / 3;\n} // Computes the Winkler distance between two string -- intrepreted from:\n// http://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance\n// s1 is the first string to compare\n// s2 is the second string to compare\n// dj is the Jaro Distance (if you've already computed it), leave blank and the method handles it\n\n\nfunction JaroWinklerDistance(s1, s2, dj) {\n  var jaro;\n  typeof dj == 'undefined' ? jaro = distance(s1, s2) : jaro = dj;\n  var p = 0.1; //\n\n  var l = 0; // length of the matching prefix\n\n  while (s1[l] == s2[l] && l < 4) l++;\n\n  return jaro + l * p * (1 - jaro);\n}\n\nmodule.exports = JaroWinklerDistance;","map":{"version":3,"sources":["/Users/merjem/chat_application/react/node_modules/natural/lib/natural/distance/jaro-winkler_distance.js"],"names":["distance","s1","s2","length","toLowerCase","matchWindow","Math","floor","max","matches1","Array","matches2","m","t","i","matched","k","JaroWinklerDistance","dj","jaro","p","l","module","exports"],"mappings":"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","sourcesContent":["/*\r\nCopyright (c) 2012, Adam Phillabaum, Chris Umbel\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nUnless otherwise stated by a specific section of code\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n*/\r\n\r\n// Computes the Jaro distance between two string -- intrepreted from:\r\n// http://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance\r\n// s1 is the first string to compare\r\n// s2 is the second string to compare\r\nfunction distance(s1, s2) {\r\n    if (typeof(s1) != \"string\" || typeof(s2) != \"string\") return 0;\r\n    if (s1.length == 0 || s2.length == 0) \r\n        return 0;\r\n    s1 = s1.toLowerCase(), s2 = s2.toLowerCase();\r\n    var matchWindow = (Math.floor(Math.max(s1.length, s2.length) / 2.0)) - 1;\r\n    var matches1 = new Array(s1.length);\r\n    var matches2 = new Array(s2.length);\r\n    var m = 0; // number of matches\r\n    var t = 0; // number of transpositions\r\n\r\n    //debug helpers\r\n    //console.log(\"s1: \" + s1 + \"; s2: \" + s2);\r\n    //console.log(\" - matchWindow: \" + matchWindow);\r\n\r\n    // find matches\r\n    for (var i = 0; i < s1.length; i++) {\r\n\tvar matched = false;\r\n\r\n\t// check for an exact match\r\n\tif (s1[i] ==  s2[i]) {\r\n\t\tmatches1[i] = matches2[i] = matched = true;\r\n\t\tm++\r\n\t}\r\n\r\n\t// check the \"match window\"\r\n\telse {\r\n        \t// this for loop is a little brutal\r\n        \tfor (k = (i <= matchWindow) ? 0 : i - matchWindow;\r\n        \t\t(k <= i + matchWindow) && k < s2.length && !matched;\r\n\t\t\tk++) {\r\n            \t\tif (s1[i] == s2[k]) {\r\n                \t\tif(!matches1[i] && !matches2[k]) {\r\n                \t    \t\tm++;\r\n               \t\t}\r\n\r\n        \t        matches1[i] = matches2[k] = matched = true;\r\n        \t    }\r\n        \t}\r\n\t}\r\n    }\r\n\r\n    if(m == 0)\r\n        return 0.0;\r\n\r\n    // count transpositions\r\n    var k = 0;\r\n\r\n    for(var i = 0; i < s1.length; i++) {\r\n    \tif(matches1[k]) {\r\n    \t    while(!matches2[k] && k < matches2.length)\r\n                k++;\r\n\t        if(s1[i] != s2[k] &&  k < matches2.length)  {\r\n                t++;\r\n            }\r\n\r\n    \t    k++;\r\n    \t}\r\n    }\r\n    \r\n    //debug helpers:\r\n    //console.log(\" - matches: \" + m);\r\n    //console.log(\" - transpositions: \" + t);\r\n    t = t / 2.0;\r\n    return (m / s1.length + m / s2.length + (m - t) / m) / 3;\r\n}\r\n\r\n// Computes the Winkler distance between two string -- intrepreted from:\r\n// http://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance\r\n// s1 is the first string to compare\r\n// s2 is the second string to compare\r\n// dj is the Jaro Distance (if you've already computed it), leave blank and the method handles it\r\nfunction JaroWinklerDistance(s1, s2, dj) {\r\n    var jaro;\r\n    (typeof(dj) == 'undefined')? jaro = distance(s1,s2) : jaro = dj;\r\n    var p = 0.1; //\r\n    var l = 0 // length of the matching prefix\r\n    while(s1[l] == s2[l] && l < 4)\r\n        l++;\r\n    \r\n    return jaro + l * p * (1 - jaro);\r\n}\r\nmodule.exports = JaroWinklerDistance;\r\n"]},"metadata":{},"sourceType":"script"}