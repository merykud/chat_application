{"ast":null,"code":"/*\nCopyright (c) 2011, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\nvar Phonetic = require('./phonetic');\n\nvar DoubleMetaphone = new Phonetic();\nmodule.exports = DoubleMetaphone;\n\nfunction isVowel(c) {\n  return c && c.match(/[aeiouy]/i);\n}\n\nfunction truncate(string, length) {\n  if (string.length >= length) string = string.substring(0, length);\n  return string;\n}\n\nfunction process(token, maxLength) {\n  token = token.toUpperCase();\n  var primary = '',\n      secondary = '';\n  var pos = 0;\n  maxLength == maxLength || 32;\n\n  function subMatch(startOffset, stopOffset, terms) {\n    return subMatchAbsolute(pos + startOffset, pos + stopOffset, terms);\n  }\n\n  function subMatchAbsolute(startOffset, stopOffset, terms) {\n    return terms.indexOf(token.substring(startOffset, stopOffset)) > -1;\n  }\n\n  function addSecondary(primaryAppendage, secondaryAppendage) {\n    primary += primaryAppendage;\n    secondary += secondaryAppendage;\n  }\n\n  function add(primaryAppendage) {\n    addSecondary(primaryAppendage, primaryAppendage);\n  }\n\n  function addCompressedDouble(c, encoded) {\n    if (token[pos + 1] == c) pos++;\n    add(encoded || c);\n  }\n\n  function handleC() {\n    if (pos > 1 && !isVowel(token[pos - 2]) && token[pos - 1] == 'A' && token[pos + 1] == 'H' && token[pos + 2] != 'I' && token[pos + 2] != 'I' || subMatch(-2, 4, ['BACHER', 'MACHER'])) {\n      add('K');\n      pos++;\n    } else if (pos == 0 && token.substring(1, 6) == 'EASAR') {\n      add('S');\n      pos++;\n    } else if (token.substring(pos + 1, pos + 4) == 'HIA') {\n      add('K');\n      pos++;\n    } else if (token[pos + 1] == 'H') {\n      if (pos > 0 && token.substring(pos + 2, pos + 4) == 'AE') {\n        addSecondary('K', 'X');\n        pos++;\n      } else if (pos == 0 && (subMatch(1, 6, ['HARAC', 'HARIS']) || subMatch(1, 3, ['HOR', 'HUM', 'HIA', 'HEM'])) && token.substring(pos + 1, pos + 5) != 'HORE') {\n        add('K');\n        pos++;\n      } else {\n        if (subMatchAbsolute(0, 3, ['VAN', 'VON']) || token.substring(0, 3) == 'SCH' || subMatch(-2, 4, ['ORCHES', 'ARCHIT', 'ORCHID']) || subMatch(2, 3, ['T', 'S']) || (subMatch(-1, 0, ['A', 'O', 'U', 'E']) || pos == 0) && subMatch(2, 3, ['B', 'F', 'H', 'L', 'M', 'N', 'R', 'V', 'W'])) {\n          add('K');\n        } else if (pos > 0) {\n          if (token.substring(0, 2) == 'MC') {\n            add('K');\n          } else {\n            addSecondary('X', 'K');\n          }\n        } else {\n          add('X');\n        }\n\n        pos++;\n      }\n    } else if (token.substring(pos, pos + 2) == 'CZ' && token.substring(pos - 2, pos + 1) != 'WICZ') {\n      addSecondary('S', 'X');\n      pos++;\n    } else if (token.substring(pos, pos + 3) == 'CIA') {\n      add('X');\n      pos += 2;\n    } else if (token[pos + 1] == 'C' && pos != 1 && token[0] != 'M') {\n      if (['I', 'E', 'H'].indexOf(token[pos + 2]) > -1 && token.substring(pos + 2, pos + 4) != 'HU') {\n        if (pos == 1 && token[pos - 1] == 'A' || subMatch(-1, 4, ['UCCEE', 'UCCES'])) {\n          add('KS');\n        } else {\n          add('X');\n        }\n\n        pos += 2;\n      } else {\n        add('K');\n        pos++;\n      }\n    } else if (['K', 'G', 'Q'].indexOf(token[pos + 1]) > -1) {\n      add('K');\n      pos++;\n    } else if (['E', 'I', 'Y'].indexOf(token[pos + 1]) > -1) {\n      if (subMatch(1, 3, ['IA', 'IE', 'IO'])) {\n        addSecondary('S', 'X');\n      } else {\n        add('S');\n      }\n\n      pos++;\n    } else {\n      add('K');\n\n      if (token[pos + 1] == ' ' && ['C', 'Q', 'G'].indexOf(token[pos + 2])) {\n        pos += 2;\n      } else if (['C', 'K', 'Q'].indexOf(token[pos + 1]) > -1 && !subMatch(1, 3, ['CE', 'CI'])) {\n        pos++;\n      }\n    }\n  }\n\n  function handleD() {\n    if (token[pos + 1] == 'G') {\n      if (['I', 'E', 'Y'].indexOf(token[pos + 2]) > -1) {\n        add('J');\n        pos += 2;\n      } else {\n        add('TK');\n        pos++;\n      }\n    } else if (token[pos + 1] == 'T') {\n      add('T');\n      pos++;\n    } else addCompressedDouble('D', 'T');\n  }\n\n  function handleG() {\n    if (token[pos + 1] == 'H') {\n      if (pos > 0 && !isVowel(token[pos - 1])) {\n        add('K');\n        pos++;\n      } else if (pos == 0) {\n        if (token[pos + 2] == 'I') {\n          add('J');\n        } else {\n          add('K');\n        }\n\n        pos++;\n      } else if (pos > 1 && (['B', 'H', 'D'].indexOf(token[pos - 2]) > -1 || ['B', 'H', 'D'].indexOf(token[pos - 3]) > -1 || ['B', 'H'].indexOf(token[pos - 4]) > -1)) {\n        pos++;\n      } else {\n        if (pos > 2 && token[pos - 1] == 'U' && ['C', 'G', 'L', 'R', 'T'].indexOf(token[pos - 3]) > -1) {\n          add('F');\n        } else if (token[pos - 1] != 'I') {\n          add('K');\n        }\n\n        pos++;\n      }\n    } else if (token[pos + 1] == 'N') {\n      if (pos == 1 && startsWithVowel && !slavoGermanic) {\n        addSecondary('KN', 'N');\n      } else {\n        if (token.substring(pos + 2, pos + 4) != 'EY' && token[pos + 1] != 'Y' && !slavoGermanic) {\n          addSecondary('N', 'KN');\n        } else add('KN');\n      }\n\n      pos++;\n    } else if (token.substring(pos + 1, pos + 3) == 'LI' && !slavoGermanic) {\n      addSecondary('KL', 'L');\n      pos++;\n    } else if (pos == 0 && (token[pos + 1] == 'Y' || subMatch(1, 3, ['ES', 'EP', 'EB', 'EL', 'EY', 'IB', 'IL', 'IN', 'IE', 'EI', 'ER']))) {\n      addSecondary('K', 'J');\n    } else {\n      addCompressedDouble('G', 'K');\n    }\n  }\n\n  function handleH() {\n    // keep if starts a word or is surrounded by vowels\n    if ((pos == 0 || isVowel(token[pos - 1])) && isVowel(token[pos + 1])) {\n      add('H');\n      pos++;\n    }\n  }\n\n  function handleJ() {\n    var jose = token.substring(pos + 1, pos + 4) == 'OSE';\n\n    if (san || jose) {\n      if (pos == 0 && token[pos + 4] == ' ' || san) {\n        add('H');\n      } else add('J', 'H');\n    } else {\n      if (pos == 0\n      /* && !jose*/\n      ) {\n          addSecondary('J', 'A');\n        } else if (isVowel(token[pos - 1]) && !slavoGermanic && (token[pos + 1] == 'A' || token[pos + 1] == 'O')) {\n        addSecondary('J', 'H');\n      } else if (pos == token.length - 1) {\n        addSecondary('J', ' ');\n      } else addCompressedDouble('J');\n    }\n  }\n\n  function handleL() {\n    if (token[pos + 1] == 'L') {\n      if (pos == token.length - 3 && (subMatch(-1, 3, ['ILLO', 'ILLA', 'ALLE']) || token.substring(pos - 1, pos + 3) == 'ALLE' && (subMatch(-2, -1, ['AS', 'OS']) > -1 || ['A', 'O'].indexOf(token[token.length - 1]) > -1))) {\n        addSecondary('L', '');\n        pos++;\n        return;\n      }\n\n      pos++;\n    }\n\n    add('L');\n  }\n\n  function handleM() {\n    addCompressedDouble('M');\n    if (token[pos - 1] == 'U' && token[pos + 1] == 'B' && (pos == token.length - 2 || token.substring(pos + 2, pos + 4) == 'ER')) pos++;\n  }\n\n  function handleP() {\n    if (token[pos + 1] == 'H') {\n      add('F');\n      pos++;\n    } else {\n      addCompressedDouble('P');\n      if (token[pos + 1] == 'B') pos++;\n    }\n  }\n\n  function handleR() {\n    if (pos == token.length - 1 && !slavoGermanic && token.substring(pos - 2, pos) == 'IE' && !subMatch(-4, -3, ['ME', 'MA'])) {\n      addSecondary('', 'R');\n    } else addCompressedDouble('R');\n  }\n\n  function handleS() {\n    if (pos == 0 && token.substring(0, 5) == 'SUGAR') {\n      addSecondary('X', 'S');\n    } else if (token[pos + 1] == 'H') {\n      if (subMatch(2, 5, ['EIM', 'OEK', 'OLM', 'OLZ'])) {\n        add('S');\n      } else {\n        add('X');\n      }\n\n      pos++;\n    } else if (subMatch(1, 3, ['IO', 'IA'])) {\n      if (slavoGermanic) {\n        add('S');\n      } else {\n        addSecondary('S', 'X');\n      }\n\n      pos++;\n    } else if (pos == 0 && ['M', 'N', 'L', 'W'].indexOf(token[pos + 1]) > -1 || token[pos + 1] == 'Z') {\n      addSecondary('S', 'X');\n      if (token[pos + 1] == 'Z') pos++;\n    } else if (token.substring(pos, pos + 2) == 'SC') {\n      if (token[pos + 2] == 'H') {\n        if (subMatch(3, 5, ['ER', 'EN'])) {\n          addSecondary('X', 'SK');\n        } else if (subMatch(3, 5, ['OO', 'UY', 'ED', 'EM'])) {\n          add('SK');\n        } else if (pos == 0 && !isVowel(token[3]) && token[3] != 'W') {\n          addSecondary('X', 'S');\n        } else {\n          add('X');\n        }\n      } else if (['I', 'E', 'Y'].indexOf(token[pos + 2]) > -1) {\n        add('S');\n      } else {\n        add('SK');\n      }\n\n      pos += 2;\n    } else if (pos == token.length - 1 && subMatch(-2, 0, ['AI', 'OI'])) {\n      addSecondary('', 'S');\n    } else if (token[pos + 1] != 'L' && token[pos - 1] != 'A' && token[pos - 1] != 'I') {\n      addCompressedDouble('S');\n      if (token[pos + 1] == 'Z') pos++;\n    }\n  }\n\n  function handleT() {\n    if (token.substring(pos + 1, pos + 4) == 'ION') {\n      add('XN');\n      pos += 3;\n    } else if (subMatch(1, 3, ['IA', 'CH'])) {\n      add('X');\n      pos += 2;\n    } else if (token[pos + 1] == 'H' || token.substring(1, 2) == 'TH') {\n      if (subMatch(2, 4, ['OM', 'AM']) || ['VAN ', 'VON '].indexOf(token.substring(0, 4)) > -1 || token.substring(0, 3) == 'SCH') {\n        add('T');\n      } else addSecondary('0', 'T');\n\n      pos++;\n    } else {\n      addCompressedDouble('T');\n      if (token[pos + 1] == 'D') pos++;\n    }\n  }\n\n  function handleX() {\n    if (pos == 0) {\n      add('S');\n    } else if (!(pos == token.length - 1 && (['IAU', 'EAU', 'IEU'].indexOf(token.substring(pos - 3, pos)) > -1 || ['AU', 'OU'].indexOf(token.substring(pos - 2, pos)) > -1))) {\n      add('KS');\n    }\n  }\n\n  function handleW() {\n    if (pos == 0) {\n      if (token[1] == 'H') {\n        add('A');\n      } else if (isVowel(token[1])) {\n        addSecondary('A', 'F');\n      }\n    } else if (pos == token.length - 1 && isVowel(token[pos - 1]) || subMatch(-1, 4, ['EWSKI', 'EWSKY', 'OWSKI', 'OWSKY']) || token.substring(0, 3) == 'SCH') {\n      addSecondary('', 'F');\n      pos++;\n    } else if (['ICZ', 'ITZ'].indexOf(token.substring(pos + 1, pos + 4)) > -1) {\n      addSecondary('TS', 'FX');\n      pos += 3;\n    }\n  }\n\n  function handleZ() {\n    if (token[pos + 1] == 'H') {\n      add('J');\n      pos++;\n    } else if (subMatch(1, 3, ['ZO', 'ZI', 'ZA']) || slavoGermanic && pos > 0 && token[pos - 1] != 'T') {\n      addSecondary('S', 'TS');\n      pos++;\n    } else addCompressedDouble('Z', 'S');\n  }\n\n  var san = token.substring(0, 3) == 'SAN';\n  var startsWithVowel = isVowel(token[0]);\n  var slavoGermanic = token.match(/(W|K|CZ|WITZ)/);\n\n  if (subMatch(0, 2, ['GN', 'KN', 'PN', 'WR', 'PS'])) {\n    pos++;\n  }\n\n  while (pos < token.length) {\n    switch (token[pos]) {\n      case 'A':\n      case 'E':\n      case 'I':\n      case 'O':\n      case 'U':\n      case 'Y':\n      case 'Ê':\n      case 'É':\n      case 'É':\n      case 'À':\n        if (pos == 0) add('A');\n        break;\n\n      case 'B':\n        addCompressedDouble('B', 'P');\n        break;\n\n      case 'C':\n        handleC();\n        break;\n\n      case 'Ç':\n        add(\"S\");\n        break;\n\n      case 'D':\n        handleD();\n        break;\n\n      case 'F':\n      case 'K':\n      case 'N':\n        addCompressedDouble(token[pos]);\n        break;\n\n      case 'G':\n        handleG();\n        break;\n\n      case 'H':\n        handleH();\n        break;\n\n      case 'J':\n        handleJ();\n        break;\n\n      case 'L':\n        handleL();\n        break;\n\n      case 'M':\n        handleM();\n        break;\n\n      case 'Ñ':\n        add('N');\n        break;\n\n      case 'P':\n        handleP();\n        break;\n\n      case 'Q':\n        addCompressedDouble('Q', 'K');\n        break;\n\n      case 'R':\n        handleR();\n        break;\n\n      case 'S':\n        handleS();\n        break;\n\n      case 'T':\n        handleT();\n        break;\n\n      case 'V':\n        addCompressedDouble('V', 'F');\n        break;\n\n      case 'W':\n        handleW();\n        break;\n\n      case 'X':\n        handleX();\n        break;\n\n      case 'Z':\n        handleZ();\n        break;\n    }\n\n    if (primary.length >= maxLength && secondary.length >= maxLength) {\n      break;\n    }\n\n    pos++;\n  }\n\n  return [truncate(primary, maxLength), truncate(secondary, maxLength)];\n}\n\nfunction compare(stringA, stringB) {\n  var encodingsA = process(stringA),\n      encodingsB = process(stringB);\n  return encodingsA[0] == encodingsB[0] || encodingsA[1] == encodingsB[1];\n}\n\n;\nDoubleMetaphone.compare = compare;\nDoubleMetaphone.process = process;\nDoubleMetaphone.isVowel = isVowel;","map":{"version":3,"sources":["/Users/merjem/chat_application/react/node_modules/natural/lib/natural/phonetics/double_metaphone.js"],"names":["Phonetic","require","DoubleMetaphone","module","exports","isVowel","c","match","truncate","string","length","substring","process","token","maxLength","toUpperCase","primary","secondary","pos","subMatch","startOffset","stopOffset","terms","subMatchAbsolute","indexOf","addSecondary","primaryAppendage","secondaryAppendage","add","addCompressedDouble","encoded","handleC","handleD","handleG","startsWithVowel","slavoGermanic","handleH","handleJ","jose","san","handleL","handleM","handleP","handleR","handleS","handleT","handleX","handleW","handleZ","compare","stringA","stringB","encodingsA","encodingsB"],"mappings":"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","sourcesContent":["/*\nCopyright (c) 2011, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\nvar Phonetic = require('./phonetic');\n\nvar DoubleMetaphone = new Phonetic();\nmodule.exports = DoubleMetaphone;\n\nfunction isVowel(c) {\n\treturn c && c.match(/[aeiouy]/i);\n}\n\nfunction truncate(string, length) {\n    if(string.length >= length)\n        string = string.substring(0, length);\n        \n    return string;\n}\n\nfunction process(token, maxLength) {\n\ttoken = token.toUpperCase();\n\tvar primary = '', secondary = '';\t\n    var pos = 0;\n    maxLength == maxLength || 32;\n\n    function subMatch(startOffset, stopOffset, terms) {\n        return subMatchAbsolute(pos + startOffset, pos + stopOffset, terms);\n    }\n\n    function subMatchAbsolute(startOffset, stopOffset, terms) {\n        return terms.indexOf(token.substring(startOffset, stopOffset)) > -1;\n    }\n\n    function addSecondary(primaryAppendage, secondaryAppendage) {\n    \tprimary += primaryAppendage;\n    \tsecondary += secondaryAppendage;\n    }\n\n    function add(primaryAppendage) {\n    \taddSecondary(primaryAppendage, primaryAppendage);\n    }\n\n    function addCompressedDouble(c, encoded) {\n    \tif(token[pos + 1] == c)\n    \t\tpos++;\n    \tadd(encoded || c);\n    }\n\n    function handleC() {\n        if(pos > 1 && !isVowel(token[pos - 2]) \n                && token[pos - 1] == 'A' && token[pos + 1] == 'H'\n                    && (token[pos + 2] != 'I' && token[pos + 2] != 'I')\n                        || subMatch(-2, 4, ['BACHER', 'MACHER'])) {\n            add('K');\n            pos++;\n        } else if(pos == 0 && token.substring(1, 6) == 'EASAR') {\n            add('S');\n            pos++;\n        } else if(token.substring(pos + 1, pos + 4) == 'HIA') {\n            add('K');\n            pos++;\n        } else if(token[pos + 1] == 'H') {\n            if(pos > 0 && token.substring(pos + 2, pos + 4) == 'AE') {\n                addSecondary('K', 'X');\n                pos++;\n            } else if(pos == 0 \n                        && (subMatch(1, 6, ['HARAC', 'HARIS']) \n                            || subMatch(1, 3, ['HOR', 'HUM', 'HIA', 'HEM']))\n                        && token.substring(pos + 1, pos + 5) != 'HORE') {\n                add('K');\n                pos++;\n            } else {\n                if((subMatchAbsolute(0, 3, ['VAN', 'VON']) || token.substring(0,  3) == 'SCH')\n                    || subMatch(-2, 4, ['ORCHES', 'ARCHIT', 'ORCHID'])\n                    || subMatch(2, 3, ['T', 'S'])\n                    || ((subMatch(-1, 0, ['A', 'O', 'U', 'E']) || pos == 0) \n                        && subMatch(2, 3, ['B', 'F', 'H', 'L', 'M', 'N', 'R', 'V', 'W']))) {\n                    add('K');\n                } else if(pos > 0) {\n                    if(token.substring(0, 2) == 'MC') {\n                        add('K');\n                    } else {\n                        addSecondary('X', 'K');   \n                    }\n                } else {\n                    add('X');\n                }\n\n                pos++;\n            } \n        } else if(token.substring(pos, pos + 2) == 'CZ' \n                && token.substring(pos - 2, pos + 1) != 'WICZ') {\n            addSecondary('S', 'X');\n            pos++;\n        } else if(token.substring(pos, pos + 3) == 'CIA') {\n            add('X');\n            pos += 2;\n        } else if(token[pos + 1] == 'C' && pos != 1 && token[0] != 'M') {\n            if(['I', 'E', 'H'].indexOf(token[pos + 2]) > -1 \n                    && token.substring(pos + 2, pos + 4) != 'HU') {\n                if(pos == 1 && token[pos - 1] == 'A'\n                        || subMatch(-1, 4, ['UCCEE', 'UCCES'])) {\n                    add('KS');\n                } else {\n                   add('X');\n                }\n\n               pos +=2;\n            } else {\n                add('K');\n                pos++;\n            }\n        } else if(['K', 'G', 'Q'].indexOf(token[pos + 1]) > -1) {\n            add('K');\n            pos++;\n        } else if(['E', 'I', 'Y'].indexOf(token[pos + 1]) > -1) {\n            if(subMatch(1, 3, ['IA', 'IE', 'IO'])) {\n                addSecondary('S', 'X');   \n            } else {\n                add('S');\n            }\n            pos++;\n        } else {            \n            add('K');\n            if(token[pos + 1] == ' ' && ['C', 'Q', 'G'].indexOf(token[pos + 2])) {\n                pos += 2;\n            } else if(['C', 'K', 'Q'].indexOf(token[pos + 1]) > -1\n                    && !subMatch(1, 3, ['CE', 'CI'])) {\n                pos++;\n            } \n        }\n    }\n\n    function handleD() {\n    \tif(token[pos + 1] == 'G') {\n    \t\tif(['I', 'E', 'Y'].indexOf(token[pos + 2]) > -1)  {\n    \t\t\tadd('J');\n    \t\t\tpos += 2;\n    \t\t} else {\n    \t\t\tadd('TK');\n    \t\t\tpos++;\n    \t\t}\n\t    } else if(token[pos + 1] == 'T') {\n    \t\tadd('T');\n\t    \tpos++;    \t\t\n    \t} else\n    \t\taddCompressedDouble('D', 'T');\n    }\n\n    function handleG() {\n        if(token[pos + 1] == 'H') {\n            if(pos > 0 && !isVowel(token[pos - 1])) {\n                add('K');\n                pos++;\n            } else if(pos == 0) {\n                if(token[pos + 2] == 'I') {\n                    add('J');\n                } else {\n                    add('K');\n                }\n                pos++;\n            } else if(pos > 1 \n                && (['B', 'H', 'D'].indexOf(token[pos - 2]) > -1\n                    || ['B', 'H', 'D'].indexOf(token[pos - 3]) > -1\n                    || ['B', 'H'].indexOf(token[pos - 4]) > -1)) {\n                pos++;\n            } else {\n                if(pos > 2\n                        && token[pos - 1] == 'U'\n                        && ['C', 'G', 'L', 'R', 'T'].indexOf(token[pos - 3]) > -1) {\n                    add('F');\n                } else if(token[pos - 1] != 'I') {\n                    add('K');\n                }\n\n                pos++;\n            }\n        } else if(token[pos + 1] == 'N') {\n            if(pos == 1 && startsWithVowel && !slavoGermanic) {\n                addSecondary('KN', 'N');\n            } else {\n                if(token.substring(pos + 2, pos + 4) != 'EY'\n                        && (token[pos + 1] != 'Y'\n                            && !slavoGermanic)) {\n                    addSecondary('N', 'KN');\n                } else\n                    add('KN');\n            }\n            pos++;\n        } else if(token.substring(pos + 1, pos + 3) == 'LI' && !slavoGermanic) {\n            addSecondary('KL', 'L');\n            pos++;\n        } else if(pos == 0 && (token[pos + 1] == 'Y'                \n                || subMatch(1, 3, ['ES', 'EP', 'EB', 'EL', 'EY', 'IB', 'IL', 'IN', 'IE', 'EI', 'ER']))) {\n            addSecondary('K', 'J')\n        } else {\n            addCompressedDouble('G', 'K');\n        }\n    }\n\n    function handleH() {\n\t\t// keep if starts a word or is surrounded by vowels\n\t\tif((pos == 0 || isVowel(token[pos - 1])) && isVowel(token[pos + 1])) {\n\t\t\tadd('H');\n\t\t\tpos++;\n\t\t}    \t\n    }    \n\n    function handleJ() {\n        var jose = (token.substring(pos + 1, pos + 4) == 'OSE');\n\n        if(san || jose) {\n            if((pos == 0 && token[pos + 4] == ' ') \n                    || san) {\n                add('H');            \n            } else\n                add('J', 'H');\n        } else {\n            if(pos == 0/* && !jose*/) {\n                addSecondary('J', 'A');\n            } else if(isVowel(token[pos - 1]) && !slavoGermanic \n                    && (token[pos + 1] == 'A' || token[pos + 1] == 'O')) {\n                addSecondary('J', 'H');\n            } else if(pos == token.length - 1) {\n                addSecondary('J', ' ');\n            } else\n                addCompressedDouble('J');\n        }\n    }\n\n    function handleL() {\n    \tif(token[pos + 1] == 'L') {\n    \t\tif(pos == token.length - 3 && (\n    \t\t\t\t\tsubMatch(-1, 3, ['ILLO', 'ILLA', 'ALLE']) || (\n    \t\t\t\t\t\ttoken.substring(pos - 1, pos + 3) == 'ALLE' &&\n    \t\t\t\t\t\t(subMatch(-2, -1, ['AS', 'OS']) > -1 ||\n    \t\t\t\t\t\t['A', 'O'].indexOf(token[token.length - 1]) > -1)))) {\n    \t\t\taddSecondary('L', '');\n    \t\t\tpos++;\n    \t\t\treturn;\n    \t\t}\n    \t\tpos++;\t\n    \t}\n    \tadd('L');\n    }\n\n    function handleM() {\n    \taddCompressedDouble('M');\n    \tif(token[pos - 1] == 'U' && token[pos + 1] == 'B' && \n    \t\t\t((pos == token.length - 2  || token.substring(pos + 2, pos + 4) == 'ER')))\n    \t\tpos++;\n    }\n\n    function handleP() {\n    \tif(token[pos + 1] == 'H') {\n    \t\tadd('F');\n    \t\tpos++;\t\n    \t} else {\n    \t\taddCompressedDouble('P');\n    \t\t    \t\t\n\t\t\tif(token[pos + 1] == 'B')\n    \t\t\tpos++;\n    \t}\n    }\n\n    function handleR() {\n    \tif(pos == token.length - 1 && !slavoGermanic\n    \t\t\t&& token.substring(pos - 2, pos) == 'IE'\n    \t\t\t&& !subMatch(-4, -3, ['ME', 'MA'])) {\n    \t\taddSecondary('', 'R');\n    \t} else\n\t    \taddCompressedDouble('R');    \t\t\n    }\n\n    function handleS() {\n        if(pos == 0 && token.substring(0, 5) == 'SUGAR') {\n            addSecondary('X', 'S');\n        } else if(token[pos + 1] == 'H') {\n            if(subMatch(2, 5, ['EIM', 'OEK', 'OLM', 'OLZ'])) {\n                add('S');\n            } else {\n                add('X');\n            }\n            pos++;\n        } else if(subMatch(1, 3, ['IO', 'IA'])) {\n            if(slavoGermanic) {\n                add('S');\n            } else {\n                addSecondary('S', 'X');\n            }\n            pos++;\n        } else if((pos == 0 && ['M', 'N', 'L', 'W'].indexOf(token[pos + 1]) > -1) \n                || token[pos + 1] == 'Z') {\n            addSecondary('S', 'X');\n            if(token[pos + 1] == 'Z')\n                pos++;\n        } else if(token.substring(pos, pos + 2) == 'SC') {\n            if(token[pos + 2] == 'H') {\n                if(subMatch(3, 5, ['ER', 'EN'])) {\n                    addSecondary('X', 'SK');\n                } else if(subMatch(3, 5, ['OO', 'UY', 'ED', 'EM'])) {\n                    add('SK');\n                } else if(pos == 0 && !isVowel(token[3]) && token[3] != 'W') {\n                    addSecondary('X', 'S');\n                } else {\n                    add('X');   \n                } \n            } else if(['I', 'E', 'Y'].indexOf(token[pos + 2]) > -1) {\n                add('S');\n            } else {\n                add('SK');\n            }\n\n            pos += 2;            \n        } else if(pos == token.length - 1\n                && subMatch(-2, 0, ['AI', 'OI'])) {\n            addSecondary('', 'S');            \n        } else if(token[pos + 1] != 'L' && (\n                token[pos - 1] != 'A' && token[pos - 1] != 'I')) {\n            addCompressedDouble('S');\n            if(token[pos + 1] == 'Z')\n                pos++;\n        }\n    }\n\n    function handleT() {\n        if(token.substring(pos + 1, pos + 4) == 'ION') {\n            add('XN');\n            pos += 3;\n        } else if(subMatch(1, 3, ['IA', 'CH'])) {\n            add('X');\n            pos += 2;\n        } else if(token[pos + 1] == 'H' \n                || token.substring(1, 2) == 'TH') {\n            if(subMatch(2, 4, ['OM', 'AM']) \n                    || ['VAN ', 'VON '].indexOf(token.substring(0, 4)) > -1\n                    || token.substring(0, 3) == 'SCH') {\n                add('T');            \n            } else\n                addSecondary('0', 'T');\n            pos++;\n        } else {\n            addCompressedDouble('T');\n\n            if(token[pos + 1] == 'D')\n                pos++;\n        }\n    }\n\n    function handleX() {\n    \tif(pos == 0) {\n    \t\tadd('S');\n    \t} else if(!(pos == token.length - 1 \n\t    \t\t&& (['IAU', 'EAU', 'IEU'].indexOf(token.substring(pos - 3, pos)) > -1\n\t    \t\t\t|| ['AU', 'OU'].indexOf(token.substring(pos - 2, pos)) > -1))) {\n    \t\tadd('KS');\n    \t}\n    }\n\n    function handleW() {\n        if(pos == 0) {\n            if(token[1] == 'H') {\n                add('A');\n            } else if (isVowel(token[1])) {\n                addSecondary('A', 'F');\n            }\n        } else if((pos == token.length - 1 && isVowel(token[pos - 1]) \n                    || subMatch(-1, 4, ['EWSKI', 'EWSKY', 'OWSKI', 'OWSKY'])\n                    || token.substring(0, 3) == 'SCH')) {\n                addSecondary('', 'F');\n                pos++;\n        } else if(['ICZ', 'ITZ'].indexOf(token.substring(pos + 1, pos + 4)) > -1) {\n            addSecondary('TS', 'FX');\n            pos += 3;\n        }\n    }\n\n    function handleZ() {\n        if(token[pos + 1] == 'H') {\n            add('J');\n            pos++;            \n        } else if(subMatch(1, 3, ['ZO', 'ZI', 'ZA']) \n                || (slavoGermanic && pos > 0 && token[pos - 1] != 'T')) {\n            addSecondary('S', 'TS');\n            pos++; \n        } else\n            addCompressedDouble('Z', 'S');\n    }\n\n    var san = (token.substring(0, 3) == 'SAN');\n    var startsWithVowel = isVowel(token[0]);\n    var slavoGermanic = token.match(/(W|K|CZ|WITZ)/);\n\n    if(subMatch(0, 2, ['GN', 'KN', 'PN', 'WR', 'PS'])) {\n    \tpos++;\n    }\n\n    while(pos < token.length) {\n    \tswitch(token[pos]) {\n\t        case 'A': case 'E': case 'I': case 'O': case 'U': case 'Y': \t        \n\t        case 'Ê': case 'É': case 'É': case'À':\n\t\t        if(pos == 0)\n\t\t        \tadd('A');\n\t\t        break;\n\t\t    case 'B':\n\t\t    \taddCompressedDouble('B', 'P');\n\t\t    \tbreak;\n            case 'C':\n                handleC();\n                break;\n\t        case 'Ç':\n\t            add(\"S\");\n\t            break;\n\t        case 'D':\n\t        \thandleD();\n\t        \tbreak;\n\t        case 'F': case 'K': case 'N':\n\t        \taddCompressedDouble(token[pos]);\n\t        \tbreak;\n            case 'G':\n                handleG();\n                break;\n\t        case 'H':\n\t        \thandleH();\n\t        \tbreak;\n            case 'J':\n                handleJ();\n                break;\n\t        case 'L':\n\t        \thandleL();\n\t        \tbreak;\n\t        case 'M':\n\t        \thandleM();\n\t        \tbreak;\n\t        case 'Ñ':\n\t        \tadd('N');\n\t        \tbreak;\n\t        case 'P':\n\t        \thandleP();\n\t        \tbreak;\n\t        case 'Q':\n\t        \taddCompressedDouble('Q', 'K');\n\t        \tbreak;\n\t        case 'R':\n\t        \thandleR();\n\t        \tbreak;\n            case 'S':\n                handleS();\n                break;\n            case 'T':\n                handleT();\n                break;\n\t        case 'V':\n\t        \taddCompressedDouble('V', 'F');\n\t        \tbreak;\n            case 'W':\n                handleW();\n                break;\n\t        case 'X':\n\t        \thandleX();\n\t        \tbreak;\n\t        case 'Z':\n\t        \thandleZ();\n\t        \tbreak;\n    \t}\n\n        if(primary.length >= maxLength && secondary.length >= maxLength) {\n            break;\n        }\n\n    \tpos++;\n    }    \n\n    return [truncate(primary, maxLength), truncate(secondary, maxLength)];\n}\n\nfunction compare(stringA, stringB) {\n    var encodingsA = process(stringA),\n        encodingsB = process(stringB);\n\n    return encodingsA[0] == encodingsB[0] || \n        encodingsA[1] == encodingsB[1];\n};\n\nDoubleMetaphone.compare = compare\nDoubleMetaphone.process = process;\nDoubleMetaphone.isVowel = isVowel;\n"]},"metadata":{},"sourceType":"script"}