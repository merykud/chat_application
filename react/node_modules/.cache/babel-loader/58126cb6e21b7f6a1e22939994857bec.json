{"ast":null,"code":"/*\nCopyright (c) 2011, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\nvar Stemmer = require('./stemmer'); // denote groups of consecutive consonants with a C and consecutive vowels\n// with a V.\n\n\nfunction categorizeGroups(token) {\n  return token.replace(/[^aeiou]+/g, 'C').replace(/[aeiouy]+/g, 'V');\n} // denote single consonants with a C and single vowels with a V\n\n\nfunction categorizeChars(token) {\n  return token.replace(/[^aeiou]/g, 'C').replace(/[aeiouy]/g, 'V');\n} // calculate the \"measure\" M of a word. M is the count of VC sequences dropping\n// an initial C if it exists and a trailing V if it exists.\n\n\nfunction measure(token) {\n  if (!token) return -1;\n  return categorizeGroups(token).replace(/^C/, '').replace(/V$/, '').length / 2;\n} // determine if a token end with a double consonant i.e. happ\n\n\nfunction endsWithDoublCons(token) {\n  return token.match(/([^aeiou])\\1$/);\n} // replace a pattern in a word. if a replacement occurs an optional callback\n// can be called to post-process the result. if no match is made NULL is\n// returned.\n\n\nfunction attemptReplace(token, pattern, replacement, callback) {\n  var result = null;\n  if (typeof pattern == 'string' && token.substr(0 - pattern.length) == pattern) result = token.replace(new RegExp(pattern + '$'), replacement);else if (pattern instanceof RegExp && token.match(pattern)) result = token.replace(pattern, replacement);\n  if (result && callback) return callback(result);else return result;\n} // attempt to replace a list of patterns/replacements on a token for a minimum\n// measure M.\n\n\nfunction attemptReplacePatterns(token, replacements, measureThreshold) {\n  var replacement = null;\n\n  for (var i = 0; i < replacements.length; i++) {\n    if (measureThreshold == null || measure(attemptReplace(token, replacements[i][0], '')) > measureThreshold) replacement = attemptReplace(token, replacements[i][0], replacements[i][1]);\n    if (replacement) break;\n  }\n\n  return replacement;\n} // replace a list of patterns/replacements on a word. if no match is made return\n// the original token.\n\n\nfunction replacePatterns(token, replacements, measureThreshold) {\n  var result = attemptReplacePatterns(token, replacements, measureThreshold);\n  token = result == null ? token : result;\n  return token;\n} // step 1a as defined for the porter stemmer algorithm. \n\n\nfunction step1a(token) {\n  if (token.match(/(ss|i)es$/)) return token.replace(/(ss|i)es$/, '$1');\n  if (token.substr(-1) == 's' && token.substr(-2, 1) != 's' && token.length > 3) return token.replace(/s?$/, '');\n  return token;\n} // step 1b as defined for the porter stemmer algorithm. \n\n\nfunction step1b(token) {\n  if (token.substr(-3) == 'eed') {\n    if (measure(token.substr(0, token.length - 3)) > 0) return token.replace(/eed$/, 'ee');\n  } else {\n    var result = attemptReplace(token, /ed|ing$/, '', function (token) {\n      if (categorizeGroups(token).indexOf('V') >= 0) {\n        var result = attemptReplacePatterns(token, [['at', 'ate'], ['bl', 'ble'], ['iz', 'ize']]);\n        if (result) return result;else {\n          if (endsWithDoublCons(token) && token.match(/[^lsz]$/)) return token.replace(/([^aeiou])\\1$/, '$1');\n          if (measure(token) == 1 && categorizeChars(token).substr(-3) == 'CVC' && token.match(/[^wxy]$/)) return token + 'e';\n        }\n        return token;\n      }\n\n      return null;\n    });\n    if (result) return result;\n  }\n\n  return token;\n} // step 1c as defined for the porter stemmer algorithm. \n\n\nfunction step1c(token) {\n  if (categorizeGroups(token).substr(-2, 1) == 'V') {\n    if (token.substr(-1) == 'y') return token.replace(/y$/, 'i');\n  }\n\n  return token;\n} // step 2 as defined for the porter stemmer algorithm. \n\n\nfunction step2(token) {\n  return replacePatterns(token, [['ational', 'ate'], ['tional', 'tion'], ['enci', 'ence'], ['anci', 'ance'], ['izer', 'ize'], ['abli', 'able'], ['alli', 'al'], ['entli', 'ent'], ['eli', 'e'], ['ousli', 'ous'], ['ization', 'ize'], ['ation', 'ate'], ['ator', 'ate'], ['alism', 'al'], ['iveness', 'ive'], ['fulness', 'ful'], ['ousness', 'ous'], ['aliti', 'al'], ['iviti', 'ive'], ['biliti', 'ble']], 0);\n} // step 3 as defined for the porter stemmer algorithm. \n\n\nfunction step3(token) {\n  return replacePatterns(token, [['icate', 'ic'], ['ative', ''], ['alize', 'al'], ['iciti', 'ic'], ['ical', 'ic'], ['ful', ''], ['ness', '']], 0);\n} // step 4 as defined for the porter stemmer algorithm. \n\n\nfunction step4(token) {\n  return replacePatterns(token, [['al', ''], ['ance', ''], ['ence', ''], ['er', ''], ['ic', ''], ['able', ''], ['ible', ''], ['ant', ''], ['ement', ''], ['ment', ''], ['ent', ''], [/([st])ion/, '$1'], ['ou', ''], ['ism', ''], ['ate', ''], ['iti', ''], ['ous', ''], ['ive', ''], ['ize', '']], 1);\n} // step 5a as defined for the porter stemmer algorithm. \n\n\nfunction step5a(token) {\n  var m = measure(token);\n  if (token.length > 3 && (m > 1 && token.substr(-1) == 'e' || m == 1 && !(categorizeChars(token).substr(-4, 3) == 'CVC' && token.match(/[^wxy].$/)))) return token.replace(/e$/, '');\n  return token;\n} // step 5b as defined for the porter stemmer algorithm. \n\n\nfunction step5b(token) {\n  if (measure(token) > 1) {\n    if (endsWithDoublCons(token) && token.substr(-2) == 'll') return token.replace(/ll$/, 'l');\n  }\n\n  return token;\n}\n\nvar PorterStemmer = new Stemmer();\nmodule.exports = PorterStemmer; // perform full stemming algorithm on a single word\n\nPorterStemmer.stem = function (token) {\n  return step5b(step5a(step4(step3(step2(step1c(step1b(step1a(token.toLowerCase())))))))).toString();\n}; //exports for tests\n\n\nPorterStemmer.step1a = step1a;\nPorterStemmer.step1b = step1b;\nPorterStemmer.step1c = step1c;\nPorterStemmer.step2 = step2;\nPorterStemmer.step3 = step3;\nPorterStemmer.step4 = step4;\nPorterStemmer.step5a = step5a;\nPorterStemmer.step5b = step5b;","map":{"version":3,"sources":["/Users/merjem/chat_application/react/node_modules/natural/lib/natural/stemmers/porter_stemmer.js"],"names":["Stemmer","require","categorizeGroups","token","replace","categorizeChars","measure","length","endsWithDoublCons","match","attemptReplace","pattern","replacement","callback","result","substr","RegExp","attemptReplacePatterns","replacements","measureThreshold","i","replacePatterns","step1a","step1b","indexOf","step1c","step2","step3","step4","step5a","m","step5b","PorterStemmer","module","exports","stem","toLowerCase","toString"],"mappings":"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","sourcesContent":["/*\nCopyright (c) 2011, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\nvar Stemmer = require('./stemmer');\n\n// denote groups of consecutive consonants with a C and consecutive vowels\n// with a V.\nfunction categorizeGroups(token) {\n    return token.replace(/[^aeiou]+/g, 'C').replace(/[aeiouy]+/g, 'V');\n}\n\n// denote single consonants with a C and single vowels with a V\nfunction categorizeChars(token) {\n    return token.replace(/[^aeiou]/g, 'C').replace(/[aeiouy]/g, 'V');\n}\n\n// calculate the \"measure\" M of a word. M is the count of VC sequences dropping\n// an initial C if it exists and a trailing V if it exists.\nfunction measure(token) {\n    if(!token)\n\treturn -1;\n\n    return categorizeGroups(token).replace(/^C/, '').replace(/V$/, '').length / 2;\n}\n\n// determine if a token end with a double consonant i.e. happ\nfunction endsWithDoublCons(token) {\n    return token.match(/([^aeiou])\\1$/);\n}\n\n// replace a pattern in a word. if a replacement occurs an optional callback\n// can be called to post-process the result. if no match is made NULL is\n// returned.\nfunction attemptReplace(token, pattern, replacement, callback) {\n    var result = null;\n    \n    if((typeof pattern == 'string') && token.substr(0 - pattern.length) == pattern)\n        result = token.replace(new RegExp(pattern + '$'), replacement);\n    else if((pattern instanceof RegExp) && token.match(pattern))\n        result = token.replace(pattern, replacement);\n        \n    if(result && callback)\n        return callback(result);\n    else\n        return result;\n}\n\n// attempt to replace a list of patterns/replacements on a token for a minimum\n// measure M.\nfunction attemptReplacePatterns(token, replacements, measureThreshold) {\n    var replacement = null;\n\n    for(var i = 0; i < replacements.length; i++) {\n\tif(measureThreshold == null || measure(attemptReplace(token, replacements[i][0], '')) > measureThreshold)\n\t    replacement = attemptReplace(token, replacements[i][0], replacements[i][1]);\n\n\tif(replacement)\n\t    break;\n    }\n    \n    return replacement;\n}\n\n// replace a list of patterns/replacements on a word. if no match is made return\n// the original token.\nfunction replacePatterns(token, replacements, measureThreshold) {\n    var result = attemptReplacePatterns(token, replacements, measureThreshold);\n    token = result == null ? token : result;\n    \n    return token;\n}\n\n// step 1a as defined for the porter stemmer algorithm. \nfunction step1a(token) {    \n    if(token.match(/(ss|i)es$/))\n        return token.replace(/(ss|i)es$/, '$1');\n \n    if(token.substr(-1) == 's' && token.substr(-2, 1) != 's' && token.length > 3)\n        return token.replace(/s?$/, '');\n    \n    return token;\n}\n\n// step 1b as defined for the porter stemmer algorithm. \nfunction step1b(token) {   \n    if(token.substr(-3) == 'eed') {\n    if(measure(token.substr(0, token.length - 3)) > 0)\n            return token.replace(/eed$/, 'ee');\n    } else {\n    var result = attemptReplace(token, /ed|ing$/, '', function(token) {     \n        if(categorizeGroups(token).indexOf('V') >= 0) {\n        var result = attemptReplacePatterns(token, [['at', 'ate'],  ['bl', 'ble'], ['iz', 'ize']]);\n\t\tif(result)\n\t\t    return result;\n\t\telse {\n\t\t    if(endsWithDoublCons(token) && token.match(/[^lsz]$/))\n\t\t\treturn token.replace(/([^aeiou])\\1$/, '$1');\n\n\t\t    if(measure(token) == 1 && categorizeChars(token).substr(-3) == 'CVC' && token.match(/[^wxy]$/))\n\t\t\treturn token + 'e';                            \n\t\t}\n\n\t\treturn token;\n\t    }\n\t    \n\t    return null;\n\t});\n\t\n\tif(result)\n\t    return result;\n    }\n\n    return token;   \n}\n\n// step 1c as defined for the porter stemmer algorithm. \nfunction step1c(token) {\n    if(categorizeGroups(token).substr(-2, 1) == 'V') {\n        if(token.substr(-1) == 'y')\n            return token.replace(/y$/, 'i');\n    }\n   \n    return token;\n}\n\n// step 2 as defined for the porter stemmer algorithm. \nfunction step2(token) {\n    return replacePatterns(token, [['ational', 'ate'], ['tional', 'tion'], ['enci', 'ence'], ['anci', 'ance'],\n        ['izer', 'ize'], ['abli', 'able'], ['alli', 'al'], ['entli', 'ent'], ['eli', 'e'],\n        ['ousli', 'ous'], ['ization', 'ize'], ['ation', 'ate'], ['ator', 'ate'],['alism', 'al'],\n        ['iveness', 'ive'], ['fulness', 'ful'], ['ousness', 'ous'], ['aliti', 'al'],\n        ['iviti', 'ive'], ['biliti', 'ble']], 0);\n}\n\n// step 3 as defined for the porter stemmer algorithm. \nfunction step3(token) {\n    return replacePatterns(token, [['icate', 'ic'], ['ative', ''], ['alize', 'al'],\n\t\t\t\t   ['iciti', 'ic'], ['ical', 'ic'], ['ful', ''], ['ness', '']], 0); \n}\n\n// step 4 as defined for the porter stemmer algorithm. \nfunction step4(token) {\n    return replacePatterns(token, [['al', ''], ['ance', ''], ['ence', ''], ['er', ''], \n        ['ic', ''], ['able', ''], ['ible', ''], ['ant', ''],\n        ['ement', ''], ['ment', ''], ['ent', ''], [/([st])ion/, '$1'], ['ou', ''], ['ism', ''],\n        ['ate', ''], ['iti', ''], ['ous', ''], ['ive', ''], \n        ['ize', '']], 1);\n}\n\n// step 5a as defined for the porter stemmer algorithm. \nfunction step5a(token) {\n    var m = measure(token);\n    \n    if(token.length > 3 && ((m > 1 && token.substr(-1) == 'e') || (m == 1 && !(categorizeChars(token).substr(-4, 3) == 'CVC' && token.match(/[^wxy].$/)))))\n        return token.replace(/e$/, '');\n\n    return token;\n}\n\n// step 5b as defined for the porter stemmer algorithm. \nfunction step5b(token) {\n    if(measure(token) > 1) {\n        if(endsWithDoublCons(token) && token.substr(-2) == 'll')\n           return token.replace(/ll$/, 'l'); \n    }\n    \n    return token;\n}\n\nvar PorterStemmer = new Stemmer();\nmodule.exports = PorterStemmer;\n\n// perform full stemming algorithm on a single word\nPorterStemmer.stem = function(token) {\n    return step5b(step5a(step4(step3(step2(step1c(step1b(step1a(token.toLowerCase())))))))).toString();\n};\n\n//exports for tests\nPorterStemmer.step1a = step1a;\nPorterStemmer.step1b = step1b;\nPorterStemmer.step1c = step1c;\nPorterStemmer.step2 = step2;\nPorterStemmer.step3 = step3;\nPorterStemmer.step4 = step4;\nPorterStemmer.step5a = step5a;\nPorterStemmer.step5b = step5b;\n"]},"metadata":{},"sourceType":"script"}