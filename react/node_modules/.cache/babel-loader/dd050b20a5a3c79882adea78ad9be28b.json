{"ast":null,"code":"// Copyright (c) 2011, Chris Umbel, James Coglan\n// Matrix class - depends on Vector.\nvar fs = require('fs');\n\nvar Sylvester = require('./sylvester');\n\nvar Vector = require('./vector'); // augment a matrix M with identity rows/cols\n\n\nfunction identSize(M, m, n, k) {\n  var e = M.elements;\n  var i = k - 1;\n\n  while (i--) {\n    var row = [];\n\n    for (var j = 0; j < n; j++) row.push(j == i ? 1 : 0);\n\n    e.unshift(row);\n  }\n\n  for (var i = k - 1; i < m; i++) {\n    while (e[i].length < n) e[i].unshift(0);\n  }\n\n  return $M(e);\n}\n\nfunction pca(X) {\n  var Sigma = X.transpose().x(X).x(1 / X.rows());\n  var svd = Sigma.svd();\n  return {\n    U: svd.U,\n    S: svd.S\n  };\n} // singular value decomposition in pure javascript\n\n\nfunction svdJs() {\n  var A = this;\n  var V = Matrix.I(A.rows());\n  var S = A.transpose();\n  var U = Matrix.I(A.cols());\n  var err = Number.MAX_VALUE;\n  var i = 0;\n  var maxLoop = 100;\n\n  while (err > 2.2737e-13 && i < maxLoop) {\n    var qr = S.transpose().qrJs();\n    S = qr.R;\n    V = V.x(qr.Q);\n    qr = S.transpose().qrJs();\n    U = U.x(qr.Q);\n    S = qr.R;\n    var e = S.triu(1).unroll().norm();\n    var f = S.diagonal().norm();\n    if (f == 0) f = 1;\n    err = e / f;\n    i++;\n  }\n\n  var ss = S.diagonal();\n  var s = [];\n\n  for (var i = 1; i <= ss.cols(); i++) {\n    var ssn = ss.e(i);\n    s.push(Math.abs(ssn));\n\n    if (ssn < 0) {\n      for (var j = 0; j < U.rows(); j++) {\n        V.elements[j][i - 1] = -V.elements[j][i - 1];\n      }\n    }\n  }\n\n  return {\n    U: U,\n    S: $V(s).toDiagonalMatrix(),\n    V: V\n  };\n} // singular value decomposition using LAPACK\n\n\nfunction svdPack() {\n  var result = lapack.sgesvd('A', 'A', this.elements);\n  return {\n    U: $M(result.U),\n    S: $M(result.S).column(1).toDiagonalMatrix(),\n    V: $M(result.VT).transpose()\n  };\n} // QR decomposition in pure javascript\n\n\nfunction qrJs() {\n  var m = this.rows();\n  var n = this.cols();\n  var Q = Matrix.I(m);\n  var A = this;\n\n  for (var k = 1; k < Math.min(m, n); k++) {\n    var ak = A.slice(k, 0, k, k).col(1);\n    var oneZero = [1];\n\n    while (oneZero.length <= m - k) oneZero.push(0);\n\n    oneZero = $V(oneZero);\n    var vk = ak.add(oneZero.x(ak.norm() * Math.sign(ak.e(1))));\n    var Vk = $M(vk);\n    var Hk = Matrix.I(m - k + 1).subtract(Vk.x(2).x(Vk.transpose()).div(Vk.transpose().x(Vk).e(1, 1)));\n    var Qk = identSize(Hk, m, n, k);\n    A = Qk.x(A); // slow way to compute Q\n\n    Q = Q.x(Qk);\n  }\n\n  return {\n    Q: Q,\n    R: A\n  };\n} // QR decomposition using LAPACK\n\n\nfunction qrPack() {\n  var qr = lapack.qr(this.elements);\n  return {\n    Q: $M(qr.Q),\n    R: $M(qr.R)\n  };\n}\n\nfunction Matrix() {}\n\nMatrix.prototype = {\n  // solve a system of linear equations (work in progress)\n  solve: function (b) {\n    var lu = this.lu();\n    b = lu.P.x(b);\n    var y = lu.L.forwardSubstitute(b);\n    var x = lu.U.backSubstitute(y);\n    return lu.P.x(x); //return this.inv().x(b);\n  },\n  // project a matrix onto a lower dim\n  pcaProject: function (k, U) {\n    var U = U || pca(this).U;\n    var Ureduce = U.slice(1, U.rows(), 1, k);\n    return {\n      Z: this.x(Ureduce),\n      U: U\n    };\n  },\n  // recover a matrix to a higher dimension\n  pcaRecover: function (U) {\n    var k = this.cols();\n    var Ureduce = U.slice(1, U.rows(), 1, k);\n    return this.x(Ureduce.transpose());\n  },\n  // grab the upper triangular part of the matrix\n  triu: function (k) {\n    if (!k) k = 0;\n    return this.map(function (x, i, j) {\n      return j - i >= k ? x : 0;\n    });\n  },\n  // unroll a matrix into a vector\n  unroll: function () {\n    var v = [];\n\n    for (var i = 1; i <= this.cols(); i++) {\n      for (var j = 1; j <= this.rows(); j++) {\n        v.push(this.e(j, i));\n      }\n    }\n\n    return $V(v);\n  },\n  // return a sub-block of the matrix\n  slice: function (startRow, endRow, startCol, endCol) {\n    var x = [];\n    if (endRow == 0) endRow = this.rows();\n    if (endCol == 0) endCol = this.cols();\n\n    for (i = startRow; i <= endRow; i++) {\n      var row = [];\n\n      for (j = startCol; j <= endCol; j++) {\n        row.push(this.e(i, j));\n      }\n\n      x.push(row);\n    }\n\n    return $M(x);\n  },\n  // Returns element (i,j) of the matrix\n  e: function (i, j) {\n    if (i < 1 || i > this.elements.length || j < 1 || j > this.elements[0].length) {\n      return null;\n    }\n\n    return this.elements[i - 1][j - 1];\n  },\n  // Returns row k of the matrix as a vector\n  row: function (i) {\n    if (i > this.elements.length) {\n      return null;\n    }\n\n    return $V(this.elements[i - 1]);\n  },\n  // Returns column k of the matrix as a vector\n  col: function (j) {\n    if (j > this.elements[0].length) {\n      return null;\n    }\n\n    var col = [],\n        n = this.elements.length;\n\n    for (var i = 0; i < n; i++) {\n      col.push(this.elements[i][j - 1]);\n    }\n\n    return $V(col);\n  },\n  // Returns the number of rows/columns the matrix has\n  dimensions: function () {\n    return {\n      rows: this.elements.length,\n      cols: this.elements[0].length\n    };\n  },\n  // Returns the number of rows in the matrix\n  rows: function () {\n    return this.elements.length;\n  },\n  // Returns the number of columns in the matrix\n  cols: function () {\n    return this.elements[0].length;\n  },\n  approxEql: function (matrix) {\n    return this.eql(matrix, Sylvester.approxPrecision);\n  },\n  // Returns true iff the matrix is equal to the argument. You can supply\n  // a vector as the argument, in which case the receiver must be a\n  // one-column matrix equal to the vector.\n  eql: function (matrix, precision) {\n    var M = matrix.elements || matrix;\n\n    if (typeof M[0][0] == 'undefined') {\n      M = Matrix.create(M).elements;\n    }\n\n    if (this.elements.length != M.length || this.elements[0].length != M[0].length) {\n      return false;\n    }\n\n    var i = this.elements.length,\n        nj = this.elements[0].length,\n        j;\n\n    while (i--) {\n      j = nj;\n\n      while (j--) {\n        if (Math.abs(this.elements[i][j] - M[i][j]) > (precision || Sylvester.precision)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  },\n  // Returns a copy of the matrix\n  dup: function () {\n    return Matrix.create(this.elements);\n  },\n  // Maps the matrix to another matrix (of the same dimensions) according to the given function\n  map: function (fn) {\n    var els = [],\n        i = this.elements.length,\n        nj = this.elements[0].length,\n        j;\n\n    while (i--) {\n      j = nj;\n      els[i] = [];\n\n      while (j--) {\n        els[i][j] = fn(this.elements[i][j], i + 1, j + 1);\n      }\n    }\n\n    return Matrix.create(els);\n  },\n  // Returns true iff the argument has the same dimensions as the matrix\n  isSameSizeAs: function (matrix) {\n    var M = matrix.elements || matrix;\n\n    if (typeof M[0][0] == 'undefined') {\n      M = Matrix.create(M).elements;\n    }\n\n    return this.elements.length == M.length && this.elements[0].length == M[0].length;\n  },\n  // Returns the result of adding the argument to the matrix\n  add: function (matrix) {\n    if (typeof matrix == 'number') {\n      return this.map(function (x, i, j) {\n        return x + matrix;\n      });\n    } else {\n      var M = matrix.elements || matrix;\n\n      if (typeof M[0][0] == 'undefined') {\n        M = Matrix.create(M).elements;\n      }\n\n      if (!this.isSameSizeAs(M)) {\n        return null;\n      }\n\n      return this.map(function (x, i, j) {\n        return x + M[i - 1][j - 1];\n      });\n    }\n  },\n  // Returns the result of subtracting the argument from the matrix\n  subtract: function (matrix) {\n    if (typeof matrix == 'number') {\n      return this.map(function (x, i, j) {\n        return x - matrix;\n      });\n    } else {\n      var M = matrix.elements || matrix;\n\n      if (typeof M[0][0] == 'undefined') {\n        M = Matrix.create(M).elements;\n      }\n\n      if (!this.isSameSizeAs(M)) {\n        return null;\n      }\n\n      return this.map(function (x, i, j) {\n        return x - M[i - 1][j - 1];\n      });\n    }\n  },\n  // Returns true iff the matrix can multiply the argument from the left\n  canMultiplyFromLeft: function (matrix) {\n    var M = matrix.elements || matrix;\n\n    if (typeof M[0][0] == 'undefined') {\n      M = Matrix.create(M).elements;\n    } // this.columns should equal matrix.rows\n\n\n    return this.elements[0].length == M.length;\n  },\n  // Returns the result of a multiplication-style operation the matrix from the right by the argument.\n  // If the argument is a scalar then just operate on all the elements. If the argument is\n  // a vector, a vector is returned, which saves you having to remember calling\n  // col(1) on the result.\n  mulOp: function (matrix, op) {\n    if (!matrix.elements) {\n      return this.map(function (x) {\n        return op(x, matrix);\n      });\n    }\n\n    var returnVector = matrix.modulus ? true : false;\n    var M = matrix.elements || matrix;\n    if (typeof M[0][0] == 'undefined') M = Matrix.create(M).elements;\n    if (!this.canMultiplyFromLeft(M)) return null;\n    var e = this.elements,\n        rowThis,\n        rowElem,\n        elements = [],\n        sum,\n        m = e.length,\n        n = M[0].length,\n        o = e[0].length,\n        i = m,\n        j,\n        k;\n\n    while (i--) {\n      rowElem = [];\n      rowThis = e[i];\n      j = n;\n\n      while (j--) {\n        sum = 0;\n        k = o;\n\n        while (k--) {\n          sum += op(rowThis[k], M[k][j]);\n        }\n\n        rowElem[j] = sum;\n      }\n\n      elements[i] = rowElem;\n    }\n\n    var M = Matrix.create(elements);\n    return returnVector ? M.col(1) : M;\n  },\n  // Returns the result of dividing the matrix from the right by the argument.\n  // If the argument is a scalar then just divide all the elements. If the argument is\n  // a vector, a vector is returned, which saves you having to remember calling\n  // col(1) on the result.\n  div: function (matrix) {\n    return this.mulOp(matrix, function (x, y) {\n      return x / y;\n    });\n  },\n  // Returns the result of multiplying the matrix from the right by the argument.\n  // If the argument is a scalar then just multiply all the elements. If the argument is\n  // a vector, a vector is returned, which saves you having to remember calling\n  // col(1) on the result.\n  multiply: function (matrix) {\n    return this.mulOp(matrix, function (x, y) {\n      return x * y;\n    });\n  },\n  x: function (matrix) {\n    return this.multiply(matrix);\n  },\n  elementMultiply: function (v) {\n    return this.map(function (k, i, j) {\n      return v.e(i, j) * k;\n    });\n  },\n  // sum all elements in the matrix\n  sum: function () {\n    var sum = 0;\n    this.map(function (x) {\n      sum += x;\n    });\n    return sum;\n  },\n  // Returns a Vector of each colum averaged.\n  mean: function () {\n    var dim = this.dimensions();\n    var r = [];\n\n    for (var i = 1; i <= dim.cols; i++) {\n      r.push(this.col(i).sum() / dim.rows);\n    }\n\n    return $V(r);\n  },\n  column: function (n) {\n    return this.col(n);\n  },\n  // element-wise log\n  log: function () {\n    return this.map(function (x) {\n      return Math.log(x);\n    });\n  },\n  // Returns a submatrix taken from the matrix\n  // Argument order is: start row, start col, nrows, ncols\n  // Element selection wraps if the required index is outside the matrix's bounds, so you could\n  // use this to perform row/column cycling or copy-augmenting.\n  minor: function (a, b, c, d) {\n    var elements = [],\n        ni = c,\n        i,\n        nj,\n        j;\n    var rows = this.elements.length,\n        cols = this.elements[0].length;\n\n    while (ni--) {\n      i = c - ni - 1;\n      elements[i] = [];\n      nj = d;\n\n      while (nj--) {\n        j = d - nj - 1;\n        elements[i][j] = this.elements[(a + i - 1) % rows][(b + j - 1) % cols];\n      }\n    }\n\n    return Matrix.create(elements);\n  },\n  // Returns the transpose of the matrix\n  transpose: function () {\n    var rows = this.elements.length,\n        i,\n        cols = this.elements[0].length,\n        j;\n    var elements = [],\n        i = cols;\n\n    while (i--) {\n      j = rows;\n      elements[i] = [];\n\n      while (j--) {\n        elements[i][j] = this.elements[j][i];\n      }\n    }\n\n    return Matrix.create(elements);\n  },\n  // Returns true iff the matrix is square\n  isSquare: function () {\n    return this.elements.length == this.elements[0].length;\n  },\n  // Returns the (absolute) largest element of the matrix\n  max: function () {\n    var m = 0,\n        i = this.elements.length,\n        nj = this.elements[0].length,\n        j;\n\n    while (i--) {\n      j = nj;\n\n      while (j--) {\n        if (Math.abs(this.elements[i][j]) > Math.abs(m)) {\n          m = this.elements[i][j];\n        }\n      }\n    }\n\n    return m;\n  },\n  // Returns the indeces of the first match found by reading row-by-row from left to right\n  indexOf: function (x) {\n    var index = null,\n        ni = this.elements.length,\n        i,\n        nj = this.elements[0].length,\n        j;\n\n    for (i = 0; i < ni; i++) {\n      for (j = 0; j < nj; j++) {\n        if (this.elements[i][j] == x) {\n          return {\n            i: i + 1,\n            j: j + 1\n          };\n        }\n      }\n    }\n\n    return null;\n  },\n  // If the matrix is square, returns the diagonal elements as a vector.\n  // Otherwise, returns null.\n  diagonal: function () {\n    if (!this.isSquare) {\n      return null;\n    }\n\n    var els = [],\n        n = this.elements.length;\n\n    for (var i = 0; i < n; i++) {\n      els.push(this.elements[i][i]);\n    }\n\n    return $V(els);\n  },\n  // Make the matrix upper (right) triangular by Gaussian elimination.\n  // This method only adds multiples of rows to other rows. No rows are\n  // scaled up or switched, and the determinant is preserved.\n  toRightTriangular: function () {\n    var M = this.dup(),\n        els;\n    var n = this.elements.length,\n        i,\n        j,\n        np = this.elements[0].length,\n        p;\n\n    for (i = 0; i < n; i++) {\n      if (M.elements[i][i] == 0) {\n        for (j = i + 1; j < n; j++) {\n          if (M.elements[j][i] != 0) {\n            els = [];\n\n            for (p = 0; p < np; p++) {\n              els.push(M.elements[i][p] + M.elements[j][p]);\n            }\n\n            M.elements[i] = els;\n            break;\n          }\n        }\n      }\n\n      if (M.elements[i][i] != 0) {\n        for (j = i + 1; j < n; j++) {\n          var multiplier = M.elements[j][i] / M.elements[i][i];\n          els = [];\n\n          for (p = 0; p < np; p++) {\n            // Elements with column numbers up to an including the number\n            // of the row that we're subtracting can safely be set straight to\n            // zero, since that's the point of this routine and it avoids having\n            // to loop over and correct rounding errors later\n            els.push(p <= i ? 0 : M.elements[j][p] - M.elements[i][p] * multiplier);\n          }\n\n          M.elements[j] = els;\n        }\n      }\n    }\n\n    return M;\n  },\n  toUpperTriangular: function () {\n    return this.toRightTriangular();\n  },\n  // Returns the determinant for square matrices\n  determinant: function () {\n    if (!this.isSquare()) {\n      return null;\n    }\n\n    if (this.cols == 1 && this.rows == 1) {\n      return this.row(1);\n    }\n\n    if (this.cols == 0 && this.rows == 0) {\n      return 1;\n    }\n\n    var M = this.toRightTriangular();\n    var det = M.elements[0][0],\n        n = M.elements.length;\n\n    for (var i = 1; i < n; i++) {\n      det = det * M.elements[i][i];\n    }\n\n    return det;\n  },\n  det: function () {\n    return this.determinant();\n  },\n  // Returns true iff the matrix is singular\n  isSingular: function () {\n    return this.isSquare() && this.determinant() === 0;\n  },\n  // Returns the trace for square matrices\n  trace: function () {\n    if (!this.isSquare()) {\n      return null;\n    }\n\n    var tr = this.elements[0][0],\n        n = this.elements.length;\n\n    for (var i = 1; i < n; i++) {\n      tr += this.elements[i][i];\n    }\n\n    return tr;\n  },\n  tr: function () {\n    return this.trace();\n  },\n  // Returns the rank of the matrix\n  rank: function () {\n    var M = this.toRightTriangular(),\n        rank = 0;\n    var i = this.elements.length,\n        nj = this.elements[0].length,\n        j;\n\n    while (i--) {\n      j = nj;\n\n      while (j--) {\n        if (Math.abs(M.elements[i][j]) > Sylvester.precision) {\n          rank++;\n          break;\n        }\n      }\n    }\n\n    return rank;\n  },\n  rk: function () {\n    return this.rank();\n  },\n  // Returns the result of attaching the given argument to the right-hand side of the matrix\n  augment: function (matrix) {\n    var M = matrix.elements || matrix;\n\n    if (typeof M[0][0] == 'undefined') {\n      M = Matrix.create(M).elements;\n    }\n\n    var T = this.dup(),\n        cols = T.elements[0].length;\n    var i = T.elements.length,\n        nj = M[0].length,\n        j;\n\n    if (i != M.length) {\n      return null;\n    }\n\n    while (i--) {\n      j = nj;\n\n      while (j--) {\n        T.elements[i][cols + j] = M[i][j];\n      }\n    }\n\n    return T;\n  },\n  // Returns the inverse (if one exists) using Gauss-Jordan\n  inverse: function () {\n    if (!this.isSquare() || this.isSingular()) {\n      return null;\n    }\n\n    var n = this.elements.length,\n        i = n,\n        j;\n    var M = this.augment(Matrix.I(n)).toRightTriangular();\n    var np = M.elements[0].length,\n        p,\n        els,\n        divisor;\n    var inverse_elements = [],\n        new_element; // Matrix is non-singular so there will be no zeros on the diagonal\n    // Cycle through rows from last to first\n\n    while (i--) {\n      // First, normalise diagonal elements to 1\n      els = [];\n      inverse_elements[i] = [];\n      divisor = M.elements[i][i];\n\n      for (p = 0; p < np; p++) {\n        new_element = M.elements[i][p] / divisor;\n        els.push(new_element); // Shuffle off the current row of the right hand side into the results\n        // array as it will not be modified by later runs through this loop\n\n        if (p >= n) {\n          inverse_elements[i].push(new_element);\n        }\n      }\n\n      M.elements[i] = els; // Then, subtract this row from those above it to\n      // give the identity matrix on the left hand side\n\n      j = i;\n\n      while (j--) {\n        els = [];\n\n        for (p = 0; p < np; p++) {\n          els.push(M.elements[j][p] - M.elements[i][p] * M.elements[j][i]);\n        }\n\n        M.elements[j] = els;\n      }\n    }\n\n    return Matrix.create(inverse_elements);\n  },\n  inv: function () {\n    return this.inverse();\n  },\n  // Returns the result of rounding all the elements\n  round: function () {\n    return this.map(function (x) {\n      return Math.round(x);\n    });\n  },\n  // Returns a copy of the matrix with elements set to the given value if they\n  // differ from it by less than Sylvester.precision\n  snapTo: function (x) {\n    return this.map(function (p) {\n      return Math.abs(p - x) <= Sylvester.precision ? x : p;\n    });\n  },\n  // Returns a string representation of the matrix\n  inspect: function () {\n    var matrix_rows = [];\n    var n = this.elements.length;\n\n    for (var i = 0; i < n; i++) {\n      matrix_rows.push($V(this.elements[i]).inspect());\n    }\n\n    return matrix_rows.join('\\n');\n  },\n  // Returns a array representation of the matrix\n  toArray: function () {\n    var matrix_rows = [];\n    var n = this.elements.length;\n\n    for (var i = 0; i < n; i++) {\n      matrix_rows.push(this.elements[i]);\n    }\n\n    return matrix_rows;\n  },\n  // Set the matrix's elements from an array. If the argument passed\n  // is a vector, the resulting matrix will be a single column.\n  setElements: function (els) {\n    var i,\n        j,\n        elements = els.elements || els;\n\n    if (typeof elements[0][0] != 'undefined') {\n      i = elements.length;\n      this.elements = [];\n\n      while (i--) {\n        j = elements[i].length;\n        this.elements[i] = [];\n\n        while (j--) {\n          this.elements[i][j] = elements[i][j];\n        }\n      }\n\n      return this;\n    }\n\n    var n = elements.length;\n    this.elements = [];\n\n    for (i = 0; i < n; i++) {\n      this.elements.push([elements[i]]);\n    }\n\n    return this;\n  },\n  // return the indexes of the columns with the largest value\n  // for each row\n  maxColumnIndexes: function () {\n    var maxes = [];\n\n    for (var i = 1; i <= this.rows(); i++) {\n      var max = null;\n      var maxIndex = -1;\n\n      for (var j = 1; j <= this.cols(); j++) {\n        if (max === null || this.e(i, j) > max) {\n          max = this.e(i, j);\n          maxIndex = j;\n        }\n      }\n\n      maxes.push(maxIndex);\n    }\n\n    return $V(maxes);\n  },\n  // return the largest values in each row\n  maxColumns: function () {\n    var maxes = [];\n\n    for (var i = 1; i <= this.rows(); i++) {\n      var max = null;\n\n      for (var j = 1; j <= this.cols(); j++) {\n        if (max === null || this.e(i, j) > max) {\n          max = this.e(i, j);\n        }\n      }\n\n      maxes.push(max);\n    }\n\n    return $V(maxes);\n  },\n  // return the indexes of the columns with the smallest values\n  // for each row\n  minColumnIndexes: function () {\n    var mins = [];\n\n    for (var i = 1; i <= this.rows(); i++) {\n      var min = null;\n      var minIndex = -1;\n\n      for (var j = 1; j <= this.cols(); j++) {\n        if (min === null || this.e(i, j) < min) {\n          min = this.e(i, j);\n          minIndex = j;\n        }\n      }\n\n      mins.push(minIndex);\n    }\n\n    return $V(mins);\n  },\n  // return the smallest values in each row\n  minColumns: function () {\n    var mins = [];\n\n    for (var i = 1; i <= this.rows(); i++) {\n      var min = null;\n\n      for (var j = 1; j <= this.cols(); j++) {\n        if (min === null || this.e(i, j) < min) {\n          min = this.e(i, j);\n        }\n      }\n\n      mins.push(min);\n    }\n\n    return $V(mins);\n  },\n  // perorm a partial pivot on the matrix. essentially move the largest\n  // row below-or-including the pivot and replace the pivot's row with it.\n  // a pivot matrix is returned so multiplication can perform the transform.\n  partialPivot: function (k, j, P, A, L) {\n    var maxIndex = 0;\n    var maxValue = 0;\n\n    for (var i = k; i <= A.rows(); i++) {\n      if (Math.abs(A.e(i, j)) > maxValue) {\n        maxValue = Math.abs(A.e(k, j));\n        maxIndex = i;\n      }\n    }\n\n    if (maxIndex != k) {\n      var tmp = A.elements[k - 1];\n      A.elements[k - 1] = A.elements[maxIndex - 1];\n      A.elements[maxIndex - 1] = tmp;\n      P.elements[k - 1][k - 1] = 0;\n      P.elements[k - 1][maxIndex - 1] = 1;\n      P.elements[maxIndex - 1][maxIndex - 1] = 0;\n      P.elements[maxIndex - 1][k - 1] = 1;\n    }\n\n    return P;\n  },\n  // solve lower-triangular matrix * x = b via forward substitution\n  forwardSubstitute: function (b) {\n    var xa = [];\n\n    for (var i = 1; i <= this.rows(); i++) {\n      var w = 0;\n\n      for (var j = 1; j < i; j++) {\n        w += this.e(i, j) * xa[j - 1];\n      }\n\n      xa.push((b.e(i) - w) / this.e(i, i));\n    }\n\n    return $V(xa);\n  },\n  // solve an upper-triangular matrix * x = b via back substitution\n  backSubstitute: function (b) {\n    var xa = [];\n\n    for (var i = this.rows(); i > 0; i--) {\n      var w = 0;\n\n      for (var j = this.cols(); j > i; j--) {\n        w += this.e(i, j) * xa[this.rows() - j];\n      }\n\n      xa.push((b.e(i) - w) / this.e(i, i));\n    }\n\n    return $V(xa.reverse());\n  },\n  luPack: luPack,\n  luJs: luJs,\n  svdJs: svdJs,\n  svdPack: svdPack,\n  qrJs: qrJs,\n  qrPack: qrPack\n}; // LU factorization from LAPACK\n\nfunction luPack() {\n  var lu = lapack.lu(this.elements);\n  return {\n    L: $M(lu.L),\n    U: $M(lu.U),\n    P: $M(lu.P) // don't pass back IPIV\n\n  };\n}\n\nvar tolerance = 1.4901e-08; // pure Javascript LU factorization\n\nfunction luJs() {\n  var A = this.dup();\n  var L = Matrix.I(A.rows());\n  var P = Matrix.I(A.rows());\n  var U = Matrix.Zeros(A.rows(), A.cols());\n  var p = 1;\n\n  for (var k = 1; k <= Math.min(A.cols(), A.rows()); k++) {\n    P = A.partialPivot(k, p, P, A, L);\n\n    for (var i = k + 1; i <= A.rows(); i++) {\n      var l = A.e(i, p) / A.e(k, p);\n      L.elements[i - 1][k - 1] = l;\n\n      for (var j = k + 1; j <= A.cols(); j++) {\n        A.elements[i - 1][j - 1] -= A.e(k, j) * l;\n      }\n    }\n\n    for (var j = k; j <= A.cols(); j++) {\n      U.elements[k - 1][j - 1] = A.e(k, j);\n    }\n\n    if (p < A.cols()) p++;\n  }\n\n  return {\n    L: L,\n    U: U,\n    P: P\n  };\n}\n\nfunction getLapack() {\n  try {\n    return require('lapack');\n  } catch (e) {}\n}\n\nvar lapack; // if node-lapack is installed use the fast, native fortran routines\n\nif (lapack = getLapack()) {\n  Matrix.prototype.svd = svdPack;\n  Matrix.prototype.qr = qrPack;\n  Matrix.prototype.lu = luPack;\n} else {\n  // otherwise use the slower pure Javascript versions\n  Matrix.prototype.svd = svdJs;\n  Matrix.prototype.qr = qrJs;\n  Matrix.prototype.lu = luJs;\n} // Constructor function\n\n\nMatrix.create = function (aElements, ignoreLapack) {\n  var M = new Matrix().setElements(aElements);\n  return M;\n}; // Identity matrix of size n\n\n\nMatrix.I = function (n) {\n  var els = [],\n      i = n,\n      j;\n\n  while (i--) {\n    j = n;\n    els[i] = [];\n\n    while (j--) {\n      els[i][j] = i == j ? 1 : 0;\n    }\n  }\n\n  return Matrix.create(els);\n};\n\nMatrix.loadFile = function (file) {\n  var contents = fs.readFileSync(file, 'utf-8');\n  var matrix = [];\n  var rowArray = contents.split('\\n');\n\n  for (var i = 0; i < rowArray.length; i++) {\n    var d = rowArray[i].split(',');\n\n    if (d.length > 1) {\n      matrix.push(d);\n    }\n  }\n\n  var M = new Matrix();\n  return M.setElements(matrix);\n}; // Diagonal matrix - all off-diagonal elements are zero\n\n\nMatrix.Diagonal = function (elements) {\n  var i = elements.length;\n  var M = Matrix.I(i);\n\n  while (i--) {\n    M.elements[i][i] = elements[i];\n  }\n\n  return M;\n}; // Rotation matrix about some axis. If no axis is\n// supplied, assume we're after a 2D transform\n\n\nMatrix.Rotation = function (theta, a) {\n  if (!a) {\n    return Matrix.create([[Math.cos(theta), -Math.sin(theta)], [Math.sin(theta), Math.cos(theta)]]);\n  }\n\n  var axis = a.dup();\n\n  if (axis.elements.length != 3) {\n    return null;\n  }\n\n  var mod = axis.modulus();\n  var x = axis.elements[0] / mod,\n      y = axis.elements[1] / mod,\n      z = axis.elements[2] / mod;\n  var s = Math.sin(theta),\n      c = Math.cos(theta),\n      t = 1 - c; // Formula derived here: http://www.gamedev.net/reference/articles/article1199.asp\n  // That proof rotates the co-ordinate system so theta\n  // becomes -theta and sin becomes -sin here.\n\n  return Matrix.create([[t * x * x + c, t * x * y - s * z, t * x * z + s * y], [t * x * y + s * z, t * y * y + c, t * y * z - s * x], [t * x * z - s * y, t * y * z + s * x, t * z * z + c]]);\n}; // Special case rotations\n\n\nMatrix.RotationX = function (t) {\n  var c = Math.cos(t),\n      s = Math.sin(t);\n  return Matrix.create([[1, 0, 0], [0, c, -s], [0, s, c]]);\n};\n\nMatrix.RotationY = function (t) {\n  var c = Math.cos(t),\n      s = Math.sin(t);\n  return Matrix.create([[c, 0, s], [0, 1, 0], [-s, 0, c]]);\n};\n\nMatrix.RotationZ = function (t) {\n  var c = Math.cos(t),\n      s = Math.sin(t);\n  return Matrix.create([[c, -s, 0], [s, c, 0], [0, 0, 1]]);\n}; // Random matrix of n rows, m columns\n\n\nMatrix.Random = function (n, m) {\n  if (arguments.length === 1) m = n;\n  return Matrix.Zero(n, m).map(function () {\n    return Math.random();\n  });\n};\n\nMatrix.Fill = function (n, m, v) {\n  if (arguments.length === 2) {\n    v = m;\n    m = n;\n  }\n\n  var els = [],\n      i = n,\n      j;\n\n  while (i--) {\n    j = m;\n    els[i] = [];\n\n    while (j--) {\n      els[i][j] = v;\n    }\n  }\n\n  return Matrix.create(els);\n}; // Matrix filled with zeros\n\n\nMatrix.Zero = function (n, m) {\n  return Matrix.Fill(n, m, 0);\n}; // Matrix filled with zeros\n\n\nMatrix.Zeros = function (n, m) {\n  return Matrix.Zero(n, m);\n}; // Matrix filled with ones\n\n\nMatrix.One = function (n, m) {\n  return Matrix.Fill(n, m, 1);\n}; // Matrix filled with ones\n\n\nMatrix.Ones = function (n, m) {\n  return Matrix.One(n, m);\n};\n\nmodule.exports = Matrix;","map":{"version":3,"sources":["/Users/merjem/chat_application/react/node_modules/sylvester/lib/node-sylvester/matrix.js"],"names":["fs","require","Sylvester","Vector","identSize","M","m","n","k","e","elements","i","row","j","push","unshift","length","$M","pca","X","Sigma","transpose","x","rows","svd","U","S","svdJs","A","V","Matrix","I","cols","err","Number","MAX_VALUE","maxLoop","qr","qrJs","R","Q","triu","unroll","norm","f","diagonal","ss","s","ssn","Math","abs","$V","toDiagonalMatrix","svdPack","result","lapack","sgesvd","column","VT","min","ak","slice","col","oneZero","vk","add","sign","Vk","Hk","subtract","div","Qk","qrPack","prototype","solve","b","lu","P","y","L","forwardSubstitute","backSubstitute","pcaProject","Ureduce","Z","pcaRecover","map","v","startRow","endRow","startCol","endCol","dimensions","approxEql","matrix","eql","approxPrecision","precision","create","nj","dup","fn","els","isSameSizeAs","canMultiplyFromLeft","mulOp","op","returnVector","modulus","rowThis","rowElem","sum","o","multiply","elementMultiply","mean","dim","r","log","minor","a","c","d","ni","isSquare","max","indexOf","index","toRightTriangular","np","p","multiplier","toUpperTriangular","determinant","det","isSingular","trace","tr","rank","rk","augment","T","inverse","divisor","inverse_elements","new_element","inv","round","snapTo","inspect","matrix_rows","join","toArray","setElements","maxColumnIndexes","maxes","maxIndex","maxColumns","minColumnIndexes","mins","minIndex","minColumns","partialPivot","maxValue","tmp","xa","w","reverse","luPack","luJs","tolerance","Zeros","l","getLapack","aElements","ignoreLapack","loadFile","file","contents","readFileSync","rowArray","split","Diagonal","Rotation","theta","cos","sin","axis","mod","z","t","RotationX","RotationY","RotationZ","Random","arguments","Zero","random","Fill","One","Ones","module","exports"],"mappings":"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","sourcesContent":["// Copyright (c) 2011, Chris Umbel, James Coglan\n// Matrix class - depends on Vector.\n\nvar fs = require('fs');\nvar Sylvester = require('./sylvester');\nvar Vector = require('./vector');\n\n// augment a matrix M with identity rows/cols\nfunction identSize(M, m, n, k) {\n    var e = M.elements;\n    var i = k - 1;\n\n    while(i--) {\n\tvar row = [];\n\t\n\tfor(var j = 0; j < n; j++)\n\t    row.push(j == i ? 1 : 0);\n\t\n        e.unshift(row);\n    }\n    \n    for(var i = k - 1; i < m; i++) {\n        while(e[i].length < n)\n            e[i].unshift(0);\n    }\n\n    return $M(e);\n}\n\nfunction pca(X) {\n    var Sigma = X.transpose().x(X).x(1 / X.rows());\n    var svd = Sigma.svd();\n    return {U: svd.U, S: svd.S};\n}\n\n// singular value decomposition in pure javascript\nfunction svdJs() {\n    var A = this;\n    var V = Matrix.I(A.rows());\n    var S = A.transpose();\n    var U = Matrix.I(A.cols());\n    var err = Number.MAX_VALUE;\n    var i = 0;\n    var maxLoop = 100;\n\n    while(err > 2.2737e-13 && i < maxLoop) {\n        var qr = S.transpose().qrJs();\n        S = qr.R;\n        V = V.x(qr.Q);\n        qr = S.transpose().qrJs();\n        U = U.x(qr.Q);\n        S = qr.R;\n\n        var e = S.triu(1).unroll().norm();\n        var f = S.diagonal().norm();\n\n        if(f == 0)\n            f = 1;\n\n        err = e / f;\n\n        i++;\n    }\n\n    var ss = S.diagonal();\n    var s = [];\n\n    for(var i = 1; i <= ss.cols(); i++) {\n        var ssn = ss.e(i);\n        s.push(Math.abs(ssn));\n\n        if(ssn < 0) {\n            for(var j = 0; j < U.rows(); j++) {\n                V.elements[j][i - 1] = -(V.elements[j][i - 1]);\n            }\n        }\n    }\n\n    return {U: U, S: $V(s).toDiagonalMatrix(), V: V};\n}\n\n// singular value decomposition using LAPACK\nfunction svdPack() {\n    var result = lapack.sgesvd('A', 'A', this.elements);\n\n    return {\n        U: $M(result.U),\n        S: $M(result.S).column(1).toDiagonalMatrix(),\n\tV: $M(result.VT).transpose()\n    };\n}\n\n// QR decomposition in pure javascript\nfunction qrJs() {\n    var m = this.rows();\n    var n = this.cols();\n    var Q = Matrix.I(m);\n    var A = this;\n    \n    for(var k = 1; k < Math.min(m, n); k++) {\n\tvar ak = A.slice(k, 0, k, k).col(1);\n\tvar oneZero = [1];\n\t\n\twhile(oneZero.length <=  m - k)\n\t    oneZero.push(0);\n\t\n\toneZero = $V(oneZero);\n\tvar vk = ak.add(oneZero.x(ak.norm() * Math.sign(ak.e(1))));\n\tvar Vk = $M(vk);\n\tvar Hk = Matrix.I(m - k + 1).subtract(Vk.x(2).x(Vk.transpose()).div(Vk.transpose().x(Vk).e(1, 1)));\n\tvar Qk = identSize(Hk, m, n, k);\n\tA = Qk.x(A);\n\t// slow way to compute Q\n\tQ = Q.x(Qk);\n    }\n    \n    return {Q: Q, R: A};\n}\n\n// QR decomposition using LAPACK\nfunction qrPack() {\n    var qr = lapack.qr(this.elements);\n\n    return {\n\tQ: $M(qr.Q),\n\tR: $M(qr.R)\n    };\n}\n\nfunction Matrix() {}\nMatrix.prototype = {\n    // solve a system of linear equations (work in progress)\n    solve: function(b) {\n\tvar lu = this.lu();\n\tb = lu.P.x(b);\n\tvar y = lu.L.forwardSubstitute(b);\n\tvar x = lu.U.backSubstitute(y);\n\treturn lu.P.x(x);\n\t//return this.inv().x(b);\n    },\n\n    // project a matrix onto a lower dim\n    pcaProject: function(k, U) {\n\tvar U = U || pca(this).U;\n\tvar Ureduce= U.slice(1, U.rows(), 1, k);\n\treturn {Z: this.x(Ureduce), U: U};\n    },\n\n    // recover a matrix to a higher dimension\n    pcaRecover: function(U) {\n\tvar k = this.cols();\n\tvar Ureduce = U.slice(1, U.rows(), 1, k);\n\treturn this.x(Ureduce.transpose());\n    },    \n\n    // grab the upper triangular part of the matrix\n    triu: function(k) {\n\tif(!k)\n\t    k = 0;\n\t\n\treturn this.map(function(x, i, j) {\n\t    return j - i >= k ? x : 0;\n\t});\n    },\n\n    // unroll a matrix into a vector\n    unroll: function() {\n\tvar v = [];\n\t\n\tfor(var i = 1; i <= this.cols(); i++) {\n\t    for(var j = 1; j <= this.rows(); j++) {\n\t\tv.push(this.e(j, i));\n\t    }\n\t}\n\n\treturn $V(v);\n    },\n\n    // return a sub-block of the matrix\n    slice: function(startRow, endRow, startCol, endCol) {\n\tvar x = [];\n\t\n\tif(endRow == 0)\n\t    endRow = this.rows();\n\t\n\tif(endCol == 0)\n\t    endCol = this.cols();\n\n\tfor(i = startRow; i <= endRow; i++) {\n\t    var row = [];\n\n\t    for(j = startCol; j <= endCol; j++) {\n\t\trow.push(this.e(i, j));\n\t    }\n\n\t    x.push(row);\n\t}\n\n\treturn $M(x);\n    },\n\n    // Returns element (i,j) of the matrix\n    e: function(i,j) {\n\tif (i < 1 || i > this.elements.length || j < 1 || j > this.elements[0].length) { return null; }\n\treturn this.elements[i - 1][j - 1];\n    },\n\n    // Returns row k of the matrix as a vector\n    row: function(i) {\n\tif (i > this.elements.length) { return null; }\n\treturn $V(this.elements[i - 1]);\n    },\n\n    // Returns column k of the matrix as a vector\n    col: function(j) {\n\tif (j > this.elements[0].length) { return null; }\n\tvar col = [], n = this.elements.length;\n\tfor (var i = 0; i < n; i++) { col.push(this.elements[i][j - 1]); }\n\treturn $V(col);\n    },\n\n    // Returns the number of rows/columns the matrix has\n    dimensions: function() {\n\treturn {rows: this.elements.length, cols: this.elements[0].length};\n    },\n\n    // Returns the number of rows in the matrix\n    rows: function() {\n\treturn this.elements.length;\n    },\n\n    // Returns the number of columns in the matrix\n    cols: function() {\n\treturn this.elements[0].length;\n    },\n\n    approxEql: function(matrix) {\n\treturn this.eql(matrix, Sylvester.approxPrecision);\n    },\n\n    // Returns true iff the matrix is equal to the argument. You can supply\n    // a vector as the argument, in which case the receiver must be a\n    // one-column matrix equal to the vector.\n    eql: function(matrix, precision) {\n\tvar M = matrix.elements || matrix;\n\tif (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }\n\tif (this.elements.length != M.length ||\n            this.elements[0].length != M[0].length) { return false; }\n\tvar i = this.elements.length, nj = this.elements[0].length, j;\n\twhile (i--) { j = nj;\n\t\t      while (j--) {\n\t\t\t  if (Math.abs(this.elements[i][j] - M[i][j]) > (precision || Sylvester.precision)) { return false; }\n\t\t      }\n\t\t    }\n\treturn true;\n    },\n\n    // Returns a copy of the matrix\n    dup: function() {\n\treturn Matrix.create(this.elements);\n    },\n\n    // Maps the matrix to another matrix (of the same dimensions) according to the given function\n    map: function(fn) {\n    var els = [], i = this.elements.length, nj = this.elements[0].length, j;\n\twhile (i--) { j = nj;\n\t\t      els[i] = [];\n\t\t      while (j--) {\n\t\t\t  els[i][j] = fn(this.elements[i][j], i + 1, j + 1);\n\t\t      }\n\t\t    }\n\treturn Matrix.create(els);\n    },\n\n    // Returns true iff the argument has the same dimensions as the matrix\n    isSameSizeAs: function(matrix) {\n\tvar M = matrix.elements || matrix;\n\tif (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }\n\treturn (this.elements.length == M.length &&\n\t\tthis.elements[0].length == M[0].length);\n    },\n\n    // Returns the result of adding the argument to the matrix\n    add: function(matrix) {\n\tif(typeof(matrix) == 'number') {\n\t    return this.map(function(x, i, j) { return x + matrix});\n\t} else {\n\t    var M = matrix.elements || matrix;\n\t    if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }\n\t    if (!this.isSameSizeAs(M)) { return null; }\n\t    return this.map(function(x, i, j) { return x + M[i - 1][j - 1]; });\n\t}\n    },\n\n    // Returns the result of subtracting the argument from the matrix\n    subtract: function(matrix) {\n\tif(typeof(matrix) == 'number') {\n\t    return this.map(function(x, i, j) { return x - matrix});\n\t} else {\n\t    var M = matrix.elements || matrix;\n\t    if (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }\n\t    if (!this.isSameSizeAs(M)) { return null; }\n\t    return this.map(function(x, i, j) { return x - M[i - 1][j - 1]; });\n\t}\n    },\n\n    // Returns true iff the matrix can multiply the argument from the left\n    canMultiplyFromLeft: function(matrix) {\n\tvar M = matrix.elements || matrix;\n\tif (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }\n\t// this.columns should equal matrix.rows\n\treturn (this.elements[0].length == M.length);\n    },\n\n    // Returns the result of a multiplication-style operation the matrix from the right by the argument.\n    // If the argument is a scalar then just operate on all the elements. If the argument is\n    // a vector, a vector is returned, which saves you having to remember calling\n    // col(1) on the result.\n    mulOp: function(matrix, op) {\n\tif (!matrix.elements) {\n\t    return this.map(function(x) { return op(x, matrix); });\n\t}\n\n\tvar returnVector = matrix.modulus ? true : false;\n\tvar M = matrix.elements || matrix;\n\tif (typeof(M[0][0]) == 'undefined') \n\t    M = Matrix.create(M).elements;\n\tif (!this.canMultiplyFromLeft(M)) \n\t    return null; \n\tvar e = this.elements, rowThis, rowElem, elements = [],\n        sum, m = e.length, n = M[0].length, o = e[0].length, i = m, j, k;\n\n\twhile (i--) {\n            rowElem = [];\n            rowThis = e[i];\n            j = n;\n\n            while (j--) {\n\t\tsum = 0;\n\t\tk = o;\n\n\t\twhile (k--) {\n                    sum += op(rowThis[k], M[k][j]);\n\t\t}\n\n\t\trowElem[j] = sum;\n            }\n\n            elements[i] = rowElem;\n\t}\n\n\tvar M = Matrix.create(elements);\n\treturn returnVector ? M.col(1) : M;\n    },\n\n    // Returns the result of dividing the matrix from the right by the argument.\n    // If the argument is a scalar then just divide all the elements. If the argument is\n    // a vector, a vector is returned, which saves you having to remember calling\n    // col(1) on the result.\n    div: function(matrix) {\n\treturn this.mulOp(matrix, function(x, y) { return x / y});\n    },\n\n    // Returns the result of multiplying the matrix from the right by the argument.\n    // If the argument is a scalar then just multiply all the elements. If the argument is\n    // a vector, a vector is returned, which saves you having to remember calling\n    // col(1) on the result.\n    multiply: function(matrix) {\n\treturn this.mulOp(matrix, function(x, y) { return x * y});\n    },\n\n    x: function(matrix) { return this.multiply(matrix); },\n\n    elementMultiply: function(v) {\n        return this.map(function(k, i, j) {\n            return v.e(i, j) * k;\n        });\n    },\n\n    // sum all elements in the matrix\n    sum: function() {\n        var sum = 0;\n\n        this.map(function(x) { sum += x;});\n\n        return sum;\n    },\n\n    // Returns a Vector of each colum averaged.\n    mean: function() {\n      var dim = this.dimensions();\n      var r = [];\n      for (var i = 1; i <= dim.cols; i++) {\n        r.push(this.col(i).sum() / dim.rows);\n      }\n      return $V(r);\n    },\n\n    column: function(n) {\n\treturn this.col(n);\n    },\n\n    // element-wise log\n    log: function() {\n\treturn this.map(function(x) { return Math.log(x); });\n    },\n\n    // Returns a submatrix taken from the matrix\n    // Argument order is: start row, start col, nrows, ncols\n    // Element selection wraps if the required index is outside the matrix's bounds, so you could\n    // use this to perform row/column cycling or copy-augmenting.\n    minor: function(a, b, c, d) {\n\tvar elements = [], ni = c, i, nj, j;\n\tvar rows = this.elements.length, cols = this.elements[0].length;\n\twhile (ni--) {\n\t    i = c - ni - 1;\n\t    elements[i] = [];\n\t    nj = d;\n\t    while (nj--) {\n\t\tj = d - nj - 1;\n\t\telements[i][j] = this.elements[(a + i - 1) % rows][(b + j - 1) % cols];\n\t    }\n\t}\n\treturn Matrix.create(elements);\n    },\n\n    // Returns the transpose of the matrix\n    transpose: function() {\n    var rows = this.elements.length, i, cols = this.elements[0].length, j;\n\tvar elements = [], i = cols;\n\twhile (i--) {\n\t    j = rows;\n\t    elements[i] = [];\n\t    while (j--) {\n\t\telements[i][j] = this.elements[j][i];\n\t    }\n\t}\n\treturn Matrix.create(elements);\n    },\n\n    // Returns true iff the matrix is square\n    isSquare: function() {\n\treturn (this.elements.length == this.elements[0].length);\n    },\n\n    // Returns the (absolute) largest element of the matrix\n    max: function() {\n\tvar m = 0, i = this.elements.length, nj = this.elements[0].length, j;\n\twhile (i--) {\n\t    j = nj;\n\t    while (j--) {\n\t\tif (Math.abs(this.elements[i][j]) > Math.abs(m)) { m = this.elements[i][j]; }\n\t    }\n\t}\n\treturn m;\n    },\n\n    // Returns the indeces of the first match found by reading row-by-row from left to right\n    indexOf: function(x) {\n\tvar index = null, ni = this.elements.length, i, nj = this.elements[0].length, j;\n\tfor (i = 0; i < ni; i++) {\n\t    for (j = 0; j < nj; j++) {\n\t\tif (this.elements[i][j] == x) { return {i: i + 1, j: j + 1}; }\n\t    }\n\t}\n\treturn null;\n    },\n\n    // If the matrix is square, returns the diagonal elements as a vector.\n    // Otherwise, returns null.\n    diagonal: function() {\n\tif (!this.isSquare) { return null; }\n\tvar els = [], n = this.elements.length;\n\tfor (var i = 0; i < n; i++) {\n\t    els.push(this.elements[i][i]);\n\t}\n\treturn $V(els);\n    },\n\n    // Make the matrix upper (right) triangular by Gaussian elimination.\n    // This method only adds multiples of rows to other rows. No rows are\n    // scaled up or switched, and the determinant is preserved.\n    toRightTriangular: function() {\n\tvar M = this.dup(), els;\n\tvar n = this.elements.length, i, j, np = this.elements[0].length, p;\n\tfor (i = 0; i < n; i++) {\n\t    if (M.elements[i][i] == 0) {\n\t\tfor (j = i + 1; j < n; j++) {\n\t\t    if (M.elements[j][i] != 0) {\n\t\t\tels = [];\n\t\t\tfor (p = 0; p < np; p++) { els.push(M.elements[i][p] + M.elements[j][p]); }\n\t\t\tM.elements[i] = els;\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\t    }\n\t    if (M.elements[i][i] != 0) {\n\t\tfor (j = i + 1; j < n; j++) {\n\t\t    var multiplier = M.elements[j][i] / M.elements[i][i];\n\t\t    els = [];\n\t\t    for (p = 0; p < np; p++) {\n\t\t\t// Elements with column numbers up to an including the number\n\t\t\t// of the row that we're subtracting can safely be set straight to\n\t\t\t// zero, since that's the point of this routine and it avoids having\n\t\t\t// to loop over and correct rounding errors later\n\t\t\tels.push(p <= i ? 0 : M.elements[j][p] - M.elements[i][p] * multiplier);\n\t\t    }\n\t\t    M.elements[j] = els;\n\t\t}\n\t    }\n\t}\n\treturn M;\n    },\n\n    toUpperTriangular: function() { return this.toRightTriangular(); },\n\n    // Returns the determinant for square matrices\n    determinant: function() {\n\tif (!this.isSquare()) { return null; }\n\tif (this.cols == 1 && this.rows == 1) { return this.row(1); }\n\tif (this.cols == 0 && this.rows == 0) { return 1; }\n\tvar M = this.toRightTriangular();\n\tvar det = M.elements[0][0], n = M.elements.length;\n\tfor (var i = 1; i < n; i++) {\n\t    det = det * M.elements[i][i];\n\t}\n\treturn det;\n    },\n    det: function() { return this.determinant(); },\n\n    // Returns true iff the matrix is singular\n    isSingular: function() {\n\treturn (this.isSquare() && this.determinant() === 0);\n    },\n\n    // Returns the trace for square matrices\n    trace: function() {\n\tif (!this.isSquare()) { return null; }\n\tvar tr = this.elements[0][0], n = this.elements.length;\n\tfor (var i = 1; i < n; i++) {\n\t    tr += this.elements[i][i];\n\t}\n\treturn tr;\n    },\n\n    tr: function() { return this.trace(); },\n\n    // Returns the rank of the matrix\n    rank: function() {\n\tvar M = this.toRightTriangular(), rank = 0;\n\tvar i = this.elements.length, nj = this.elements[0].length, j;\n\twhile (i--) {\n\t    j = nj;\n\t    while (j--) {\n\t\tif (Math.abs(M.elements[i][j]) > Sylvester.precision) { rank++; break; }\n\t    }\n\t}\n\treturn rank;\n    },\n\n    rk: function() { return this.rank(); },\n\n    // Returns the result of attaching the given argument to the right-hand side of the matrix\n    augment: function(matrix) {\n\tvar M = matrix.elements || matrix;\n\tif (typeof(M[0][0]) == 'undefined') { M = Matrix.create(M).elements; }\n\tvar T = this.dup(), cols = T.elements[0].length;\n\tvar i = T.elements.length, nj = M[0].length, j;\n\tif (i != M.length) { return null; }\n\twhile (i--) {\n\t    j = nj;\n\t    while (j--) {\n\t\tT.elements[i][cols + j] = M[i][j];\n\t    }\n\t}\n\treturn T;\n    },\n\n    // Returns the inverse (if one exists) using Gauss-Jordan\n    inverse: function() {\n\tif (!this.isSquare() || this.isSingular()) { return null; }\n\tvar n = this.elements.length, i = n, j;\n\tvar M = this.augment(Matrix.I(n)).toRightTriangular();\n\tvar np = M.elements[0].length, p, els, divisor;\n\tvar inverse_elements = [], new_element;\n\t// Matrix is non-singular so there will be no zeros on the diagonal\n\t// Cycle through rows from last to first\n\twhile (i--) {\n\t    // First, normalise diagonal elements to 1\n\t    els = [];\n\t    inverse_elements[i] = [];\n\t    divisor = M.elements[i][i];\n\t    for (p = 0; p < np; p++) {\n        new_element = M.elements[i][p] / divisor;\n\t\tels.push(new_element);\n\t\t// Shuffle off the current row of the right hand side into the results\n\t\t// array as it will not be modified by later runs through this loop\n\t\tif (p >= n) { inverse_elements[i].push(new_element); }\n\t    }\n\t    M.elements[i] = els;\n\t    // Then, subtract this row from those above it to\n\t    // give the identity matrix on the left hand side\n\t    j = i;\n\t    while (j--) {\n\t\tels = [];\n\t\tfor (p = 0; p < np; p++) {\n\t\t    els.push(M.elements[j][p] - M.elements[i][p] * M.elements[j][i]);\n\t\t}\n\t\tM.elements[j] = els;\n\t    }\n\t}\n\treturn Matrix.create(inverse_elements);\n    },\n\n    inv: function() { return this.inverse(); },\n\n    // Returns the result of rounding all the elements\n    round: function() {\n\treturn this.map(function(x) { return Math.round(x); });\n    },\n\n    // Returns a copy of the matrix with elements set to the given value if they\n    // differ from it by less than Sylvester.precision\n    snapTo: function(x) {\n\treturn this.map(function(p) {\n\t    return (Math.abs(p - x) <= Sylvester.precision) ? x : p;\n\t});\n    },\n\n    // Returns a string representation of the matrix\n    inspect: function() {\n\tvar matrix_rows = [];\n\tvar n = this.elements.length;\n\tfor (var i = 0; i < n; i++) {\n\t    matrix_rows.push($V(this.elements[i]).inspect());\n\t}\n\treturn matrix_rows.join('\\n');\n    },\n\n    // Returns a array representation of the matrix\n    toArray: function() {\n    \tvar matrix_rows = [];\n    \tvar n = this.elements.length;\n    \tfor (var i = 0; i < n; i++) {\n        matrix_rows.push(this.elements[i]);\n    \t}\n      return matrix_rows;\n    },\n\n\n    // Set the matrix's elements from an array. If the argument passed\n    // is a vector, the resulting matrix will be a single column.\n    setElements: function(els) {\n\tvar i, j, elements = els.elements || els;\n\tif (typeof(elements[0][0]) != 'undefined') {\n\t    i = elements.length;\n\t    this.elements = [];\n\t    while (i--) {\n\t\tj = elements[i].length;\n\t\tthis.elements[i] = [];\n\t\twhile (j--) {\n\t\t    this.elements[i][j] = elements[i][j];\n\t\t}\n\t    }\n\t    return this;\n\t}\n\tvar n = elements.length;\n\tthis.elements = [];\n\tfor (i = 0; i < n; i++) {\n\t    this.elements.push([elements[i]]);\n\t}\n\treturn this;\n    },\n\n    // return the indexes of the columns with the largest value\n    // for each row\n    maxColumnIndexes: function() {\n\tvar maxes = [];\n\n\tfor(var i = 1; i <= this.rows(); i++) {\n\t    var max = null;\n\t    var maxIndex = -1;\n\n\t    for(var j = 1; j <= this.cols(); j++) {\n\t\tif(max === null || this.e(i, j) > max) {\n\t\t    max = this.e(i, j);\n\t\t    maxIndex = j;\n\t\t}\n\t    }\n\n\t    maxes.push(maxIndex);\n\t}\n\n\treturn $V(maxes);\n    },\n\n    // return the largest values in each row\n    maxColumns: function() {\n\tvar maxes = [];\n\n\tfor(var i = 1; i <= this.rows(); i++) {\n\t    var max = null;\n\n\t    for(var j = 1; j <= this.cols(); j++) {\n\t\tif(max === null || this.e(i, j) > max) {\n\t\t    max = this.e(i, j);\n\t\t}\n\t    }\n\n\t    maxes.push(max);\n\t}\n\n\treturn $V(maxes);\n    },\n\n    // return the indexes of the columns with the smallest values\n    // for each row\n    minColumnIndexes: function() {\n\tvar mins = [];\n\n\tfor(var i = 1; i <= this.rows(); i++) {\n\t    var min = null;\n\t    var minIndex = -1;\n\n\t    for(var j = 1; j <= this.cols(); j++) {\n\t\tif(min === null || this.e(i, j) < min) {\n\t\t    min = this.e(i, j);\n\t\t    minIndex = j;\n\t\t}\n\t    }\n\n\t    mins.push(minIndex);\n\t}\n\n\treturn $V(mins);\n    },\n\n    // return the smallest values in each row\n    minColumns: function() {\n\tvar mins = [];\n\n\tfor(var i = 1; i <= this.rows(); i++) {\n\t    var min = null;\n\n\t    for(var j = 1; j <= this.cols(); j++) {\n\t\tif(min === null || this.e(i, j) < min) {\n\t\t    min = this.e(i, j);\n\t\t}\n\t    }\n\n\t    mins.push(min);\n\t}\n\n\treturn $V(mins);\n    },\n    \n    // perorm a partial pivot on the matrix. essentially move the largest\n    // row below-or-including the pivot and replace the pivot's row with it.\n    // a pivot matrix is returned so multiplication can perform the transform.\n    partialPivot: function(k, j, P, A, L) {\n\tvar maxIndex = 0;\n\tvar maxValue = 0;\n\n\tfor(var i = k; i <= A.rows(); i++) {\n\t    if(Math.abs(A.e(i, j)) > maxValue) {\n\t\tmaxValue = Math.abs(A.e(k, j));\n\t\tmaxIndex = i;\n\t    }\n\t}\n\n\tif(maxIndex != k) {\n\t    var tmp = A.elements[k - 1];\n\t    A.elements[k - 1] = A.elements[maxIndex - 1];\n\t    A.elements[maxIndex - 1] = tmp;\n\t    \n\t    P.elements[k - 1][k - 1] = 0;\n\t    P.elements[k - 1][maxIndex - 1] = 1;\n\t    P.elements[maxIndex - 1][maxIndex - 1] = 0;\n\t    P.elements[maxIndex - 1][k - 1] = 1;\n\t}\n\t\n\treturn P;\n    },\n\n    // solve lower-triangular matrix * x = b via forward substitution\n    forwardSubstitute: function(b) {\n\tvar xa = [];\n\n\tfor(var i = 1; i <= this.rows(); i++) {\n\t    var w = 0;\n\n\t    for(var j = 1; j < i; j++) {\n\t\tw += this.e(i, j) * xa[j - 1];\n\t    }\n\n\t    xa.push((b.e(i) - w) / this.e(i, i));\n\t}\n\n\treturn $V(xa);\n    },\n\n    // solve an upper-triangular matrix * x = b via back substitution\n    backSubstitute: function(b) {\n\tvar xa = [];\n\n\tfor(var i = this.rows(); i > 0; i--) {\n\t    var w = 0;\n\n\t    for(var j = this.cols(); j > i; j--) {\n\t\tw += this.e(i, j) * xa[this.rows() - j];\n\t    }\n\n\t    xa.push((b.e(i) - w) / this.e(i, i));\n\t}\n\n\treturn $V(xa.reverse());\n    },\n    \n    luPack: luPack,\n    luJs: luJs,\n    svdJs: svdJs,\n    svdPack: svdPack,\n    qrJs: qrJs,\n    qrPack: qrPack\n};\n\n// LU factorization from LAPACK\nfunction luPack() {\n    var lu = lapack.lu(this.elements);\n    return {\n\tL: $M(lu.L),\n\tU: $M(lu.U),\n\tP: $M(lu.P)\n\t// don't pass back IPIV\n    };\n}\n\nvar tolerance =  1.4901e-08;\n\n// pure Javascript LU factorization\nfunction luJs() {\n    var A = this.dup();\n    var L = Matrix.I(A.rows());\n    var P = Matrix.I(A.rows());\n    var U = Matrix.Zeros(A.rows(), A.cols());\n    var p = 1;\n\n    for(var k = 1; k <= Math.min(A.cols(), A.rows()); k++) {\n\tP = A.partialPivot(k, p, P, A, L);\n\t\n\tfor(var i = k + 1; i <= A.rows(); i++) {\n\t    var l = A.e(i, p) / A.e(k, p);\n\t    L.elements[i - 1][k - 1] = l;\n\t    \n\t    for(var j = k + 1 ; j <= A.cols(); j++) {\n\t\tA.elements[i - 1][j - 1] -= A.e(k, j) * l;\n\t    }\n\t}\n\t\n\tfor(var j = k; j <= A.cols(); j++) {\n\t    U.elements[k - 1][j - 1] = A.e(k, j);\n\t}\n\n\tif(p < A.cols())\n\t    p++;\n    }    \n    \n    return {L: L, U: U, P: P};\n}\n\nfunction getLapack() {\n    try {\n\treturn require('lapack');\n    } catch(e) {}\n}\n\nvar lapack;\n\n// if node-lapack is installed use the fast, native fortran routines\nif(lapack = getLapack()) {\n    Matrix.prototype.svd = svdPack;\n    Matrix.prototype.qr = qrPack;\n    Matrix.prototype.lu = luPack;\n} else {\n    // otherwise use the slower pure Javascript versions\n    Matrix.prototype.svd = svdJs;\n    Matrix.prototype.qr = qrJs;\n    Matrix.prototype.lu = luJs;\n}\n\n// Constructor function\nMatrix.create = function(aElements, ignoreLapack) {\n    var M = new Matrix().setElements(aElements);\n    return M;\n};\n\n// Identity matrix of size n\nMatrix.I = function(n) {\n    var els = [], i = n, j;\n    while (i--) {\n\tj = n;\n\tels[i] = [];\n\twhile (j--) {\n\t    els[i][j] = (i == j) ? 1 : 0;\n\t}\n    }\n    return Matrix.create(els);\n};\n\nMatrix.loadFile = function(file) {\n    var contents = fs.readFileSync(file, 'utf-8');\n    var matrix = [];\n\n    var rowArray = contents.split('\\n');\n    for (var i = 0; i < rowArray.length; i++) {\n\tvar d = rowArray[i].split(',');\n\tif (d.length > 1) {\n\t    matrix.push(d);\n\t}\n    }\n\n    var M = new Matrix();\n    return M.setElements(matrix);\n};\n\n// Diagonal matrix - all off-diagonal elements are zero\nMatrix.Diagonal = function(elements) {\n    var i = elements.length;\n    var M = Matrix.I(i);\n    while (i--) {\n\tM.elements[i][i] = elements[i];\n    }\n    return M;\n};\n\n// Rotation matrix about some axis. If no axis is\n// supplied, assume we're after a 2D transform\nMatrix.Rotation = function(theta, a) {\n    if (!a) {\n\treturn Matrix.create([\n\t    [Math.cos(theta), -Math.sin(theta)],\n\t    [Math.sin(theta), Math.cos(theta)]\n\t]);\n    }\n    var axis = a.dup();\n    if (axis.elements.length != 3) { return null; }\n    var mod = axis.modulus();\n    var x = axis.elements[0] / mod, y = axis.elements[1] / mod, z = axis.elements[2] / mod;\n    var s = Math.sin(theta), c = Math.cos(theta), t = 1 - c;\n    // Formula derived here: http://www.gamedev.net/reference/articles/article1199.asp\n    // That proof rotates the co-ordinate system so theta\n    // becomes -theta and sin becomes -sin here.\n    return Matrix.create([\n\t[t * x * x + c, t * x * y - s * z, t * x * z + s * y],\n\t[t * x * y + s * z, t * y * y + c, t * y * z - s * x],\n\t[t * x * z - s * y, t * y * z + s * x, t * z * z + c]\n    ]);\n};\n\n// Special case rotations\nMatrix.RotationX = function(t) {\n    var c = Math.cos(t), s = Math.sin(t);\n    return Matrix.create([\n\t[1, 0, 0],\n\t[0, c, -s],\n\t[0, s, c]\n    ]);\n};\n\nMatrix.RotationY = function(t) {\n    var c = Math.cos(t), s = Math.sin(t);\n    return Matrix.create([\n\t[c, 0, s],\n\t[0, 1, 0],\n\t[-s, 0, c]\n    ]);\n};\n\nMatrix.RotationZ = function(t) {\n    var c = Math.cos(t), s = Math.sin(t);\n    return Matrix.create([\n\t[c, -s, 0],\n\t[s, c, 0],\n\t[0, 0, 1]\n    ]);\n};\n\n// Random matrix of n rows, m columns\nMatrix.Random = function(n, m) {\n    if (arguments.length === 1) m = n;\n    return Matrix.Zero(n, m).map(\n\tfunction() { return Math.random(); }\n  );\n};\n\nMatrix.Fill = function(n, m, v) {\n    if (arguments.length === 2) {\n\tv = m;\n\tm = n;\n    }\n\n    var els = [], i = n, j;\n\n    while (i--) {\n\tj = m;\n\tels[i] = [];\n\n\twhile (j--) {\n\t    els[i][j] = v;\n\t}\n    }\n\n    return Matrix.create(els);\n};\n\n// Matrix filled with zeros\nMatrix.Zero = function(n, m) {\n    return Matrix.Fill(n, m, 0);\n};\n\n// Matrix filled with zeros\nMatrix.Zeros = function(n, m) {\n    return Matrix.Zero(n, m);\n};\n\n// Matrix filled with ones\nMatrix.One = function(n, m) {\n    return Matrix.Fill(n, m, 1);\n};\n\n// Matrix filled with ones\nMatrix.Ones = function(n, m) {\n    return Matrix.One(n, m);\n};\n\nmodule.exports = Matrix;\n"]},"metadata":{},"sourceType":"script"}