{"ast":null,"code":"var natural = require('natural');\n\nvar nounInflector = new natural.NounInflector();\n\nvar articles = require('articles/lib/Articles.js');\n\nvar randy = require('randy');\n\nvar _ = require('lodash'); // ---------------------------------------------\n//                  DEFAULTS\n// ---------------------------------------------\n\n\nfunction Sentencer() {\n  var self = this;\n  self._nouns = require('./words/nouns.js');\n  self._adjectives = require('./words/adjectives.js');\n  self.actions = {\n    noun: function () {\n      return randy.choice(self._nouns);\n    },\n    a_noun: function () {\n      return articles.articlize(self.actions.noun());\n    },\n    nouns: function () {\n      return nounInflector.pluralize(randy.choice(self._nouns));\n    },\n    adjective: function () {\n      return randy.choice(self._adjectives);\n    },\n    an_adjective: function () {\n      return articles.articlize(self.actions.adjective());\n    }\n  };\n\n  self.configure = function (options) {\n    // merge actions\n    self.actions = _.merge(self.actions, options.actions || {}); // overwrite nouns and adjectives if we got some\n\n    self._nouns = options.nounList || self._nouns;\n    self._adjectives = options.adjectiveList || self._adjectives;\n  };\n\n  self.use = function (options) {\n    var newInstance = new Sentencer();\n    newInstance.configure(options);\n    return newInstance;\n  };\n} // ---------------------------------------------\n//                  THE GOODS\n// ---------------------------------------------\n\n\nSentencer.prototype.make = function (template) {\n  var self = this;\n  var sentence = template;\n  var occurrences = template.match(/\\{\\{(.+?)\\}\\}/g);\n\n  if (occurrences && occurrences.length) {\n    for (var i = 0; i < occurrences.length; i++) {\n      var action = occurrences[i].replace('{{', '').replace('}}', '').trim();\n      var result = '';\n      var actionIsFunctionCall = action.match(/^\\w+\\((.+?)\\)$/);\n\n      if (actionIsFunctionCall) {\n        var actionNameWithParens = action.match(/^(\\w+)\\(/);\n        var actionName = actionNameWithParens[1];\n        var actionExists = self.actions[actionName];\n        var actionContents = action.match(/\\((.+?)\\)/);\n        actionContents = actionContents && actionContents[1];\n\n        if (actionExists && actionContents) {\n          try {\n            var args = _.map(actionContents.split(','), maybeCastToNumber);\n\n            result = self.actions[actionName].apply(null, args);\n          } catch (e) {}\n        }\n      } else {\n        if (self.actions[action]) {\n          result = self.actions[action]();\n        } else {\n          result = '{{ ' + action + ' }}';\n        }\n      }\n\n      sentence = sentence.replace(occurrences[i], result);\n    }\n  }\n\n  return sentence;\n};\n\nfunction maybeCastToNumber(input) {\n  var trimmedInput = input.trim();\n  return !Number.isNaN(Number(trimmedInput)) ? Number(trimmedInput) : trimmedInput;\n} // ---------------------------------------------\n//                    DONE\n// ---------------------------------------------\n\n\nvar instance = new Sentencer();\nmodule.exports = instance;","map":{"version":3,"sources":["/Users/merjem/chat_application/react/node_modules/sentencer/index.js"],"names":["natural","require","nounInflector","NounInflector","articles","randy","_","Sentencer","self","_nouns","_adjectives","actions","noun","choice","a_noun","articlize","nouns","pluralize","adjective","an_adjective","configure","options","merge","nounList","adjectiveList","use","newInstance","prototype","make","template","sentence","occurrences","match","length","i","action","replace","trim","result","actionIsFunctionCall","actionNameWithParens","actionName","actionExists","actionContents","args","map","split","maybeCastToNumber","apply","e","input","trimmedInput","Number","isNaN","instance","module","exports"],"mappings":"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","sourcesContent":["var natural = require('natural');\nvar nounInflector = new natural.NounInflector();\nvar articles = require('articles/lib/Articles.js');\nvar randy = require('randy');\nvar _ = require('lodash');\n\n// ---------------------------------------------\n//                  DEFAULTS\n// ---------------------------------------------\n\nfunction Sentencer() {\n  var self = this;\n\n  self._nouns      = require('./words/nouns.js');\n  self._adjectives = require('./words/adjectives.js');\n\n  self.actions = {\n    noun: function() {\n      return randy.choice(self._nouns);\n    },\n    a_noun: function() {\n      return articles.articlize( self.actions.noun() );\n    },\n    nouns: function() {\n      return nounInflector.pluralize( randy.choice(self._nouns) );\n    },\n    adjective: function() {\n      return randy.choice(self._adjectives);\n    },\n    an_adjective: function() {\n      return articles.articlize( self.actions.adjective() );\n    }\n  };\n\n  self.configure = function(options) {\n    // merge actions\n    self.actions     = _.merge(self.actions, options.actions || {});\n    // overwrite nouns and adjectives if we got some\n    self._nouns      = options.nounList || self._nouns;\n    self._adjectives = options.adjectiveList || self._adjectives;\n  };\n\n  self.use = function(options) {\n    var newInstance = new Sentencer();\n    newInstance.configure(options);\n    return newInstance;\n  };\n}\n\n// ---------------------------------------------\n//                  THE GOODS\n// ---------------------------------------------\n\nSentencer.prototype.make = function(template) {\n  var self = this;\n\n  var sentence = template;\n  var occurrences = template.match(/\\{\\{(.+?)\\}\\}/g);\n\n  if(occurrences && occurrences.length) {\n    for(var i = 0; i < occurrences.length; i++) {\n      var action = occurrences[i].replace('{{', '').replace('}}', '').trim();\n      var result = '';\n      var actionIsFunctionCall = action.match(/^\\w+\\((.+?)\\)$/);\n\n      if(actionIsFunctionCall) {\n        var actionNameWithParens = action.match(/^(\\w+)\\(/);\n        var actionName = actionNameWithParens[1];\n        var actionExists = self.actions[actionName];\n        var actionContents = action.match(/\\((.+?)\\)/);\n        actionContents = actionContents && actionContents[1];\n\n        if (actionExists && actionContents) {\n          try {\n            var args = _.map(actionContents.split(','), maybeCastToNumber);\n            result = self.actions[actionName].apply(null, args);\n          }\n          catch(e) { }\n        }\n      } else {\n        if(self.actions[action]) {\n          result = self.actions[action]();\n        } else {\n          result = '{{ ' + action + ' }}';\n        }\n      }\n      sentence = sentence.replace(occurrences[i], result);\n    }\n  }\n  return sentence;\n};\n\nfunction maybeCastToNumber(input) {\n  var trimmedInput = input.trim();\n  return !Number.isNaN(Number(trimmedInput)) ? Number(trimmedInput) : trimmedInput;\n}\n\n// ---------------------------------------------\n//                    DONE\n// ---------------------------------------------\n\nvar instance = new Sentencer();\nmodule.exports = instance;\n"]},"metadata":{},"sourceType":"script"}