{"ast":null,"code":"// Copyright (c) 2011, Chris Umbel, James Coglan\n// This file is required in order for any other classes to work. Some Vector methods work with the\n// other Sylvester classes and are useless unless they are included. Other classes such as Line and\n// Plane will not function at all without Vector being loaded first.\nvar Sylvester = require('./sylvester'),\n    Matrix = require('./matrix');\n\nfunction Vector() {}\n\nVector.prototype = {\n  norm: function () {\n    var n = this.elements.length;\n    var sum = 0;\n\n    while (n--) {\n      sum += Math.pow(this.elements[n], 2);\n    }\n\n    return Math.sqrt(sum);\n  },\n  // Returns element i of the vector\n  e: function (i) {\n    return i < 1 || i > this.elements.length ? null : this.elements[i - 1];\n  },\n  // Returns the number of rows/columns the vector has\n  dimensions: function () {\n    return {\n      rows: 1,\n      cols: this.elements.length\n    };\n  },\n  // Returns the number of rows in the vector\n  rows: function () {\n    return 1;\n  },\n  // Returns the number of columns in the vector\n  cols: function () {\n    return this.elements.length;\n  },\n  // Returns the modulus ('length') of the vector\n  modulus: function () {\n    return Math.sqrt(this.dot(this));\n  },\n  // Returns true iff the vector is equal to the argument\n  eql: function (vector) {\n    var n = this.elements.length;\n    var V = vector.elements || vector;\n\n    if (n != V.length) {\n      return false;\n    }\n\n    while (n--) {\n      if (Math.abs(this.elements[n] - V[n]) > Sylvester.precision) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n  // Returns a copy of the vector\n  dup: function () {\n    return Vector.create(this.elements);\n  },\n  // Maps the vector to another vector according to the given function\n  map: function (fn) {\n    var elements = [];\n    this.each(function (x, i) {\n      elements.push(fn(x, i));\n    });\n    return Vector.create(elements);\n  },\n  // Calls the iterator for each element of the vector in turn\n  each: function (fn) {\n    var n = this.elements.length;\n\n    for (var i = 0; i < n; i++) {\n      fn(this.elements[i], i + 1);\n    }\n  },\n  // Returns a new vector created by normalizing the receiver\n  toUnitVector: function () {\n    var r = this.modulus();\n\n    if (r === 0) {\n      return this.dup();\n    }\n\n    return this.map(function (x) {\n      return x / r;\n    });\n  },\n  // Returns the angle between the vector and the argument (also a vector)\n  angleFrom: function (vector) {\n    var V = vector.elements || vector;\n    var n = this.elements.length,\n        k = n,\n        i;\n\n    if (n != V.length) {\n      return null;\n    }\n\n    var dot = 0,\n        mod1 = 0,\n        mod2 = 0; // Work things out in parallel to save time\n\n    this.each(function (x, i) {\n      dot += x * V[i - 1];\n      mod1 += x * x;\n      mod2 += V[i - 1] * V[i - 1];\n    });\n    mod1 = Math.sqrt(mod1);\n    mod2 = Math.sqrt(mod2);\n\n    if (mod1 * mod2 === 0) {\n      return null;\n    }\n\n    var theta = dot / (mod1 * mod2);\n\n    if (theta < -1) {\n      theta = -1;\n    }\n\n    if (theta > 1) {\n      theta = 1;\n    }\n\n    return Math.acos(theta);\n  },\n  // Returns true iff the vector is parallel to the argument\n  isParallelTo: function (vector) {\n    var angle = this.angleFrom(vector);\n    return angle === null ? null : angle <= Sylvester.precision;\n  },\n  // Returns true iff the vector is antiparallel to the argument\n  isAntiparallelTo: function (vector) {\n    var angle = this.angleFrom(vector);\n    return angle === null ? null : Math.abs(angle - Math.PI) <= Sylvester.precision;\n  },\n  // Returns true iff the vector is perpendicular to the argument\n  isPerpendicularTo: function (vector) {\n    var dot = this.dot(vector);\n    return dot === null ? null : Math.abs(dot) <= Sylvester.precision;\n  },\n  // Returns the result of adding the argument to the vector\n  add: function (value) {\n    var V = value.elements || value;\n    if (this.elements.length != V.length) return this.map(function (v) {\n      return v + value;\n    });else return this.map(function (x, i) {\n      return x + V[i - 1];\n    });\n  },\n  // Returns the result of subtracting the argument from the vector\n  subtract: function (v) {\n    if (typeof v == 'number') return this.map(function (k) {\n      return k - v;\n    });\n    var V = v.elements || v;\n\n    if (this.elements.length != V.length) {\n      return null;\n    }\n\n    return this.map(function (x, i) {\n      return x - V[i - 1];\n    });\n  },\n  // Returns the result of multiplying the elements of the vector by the argument\n  multiply: function (k) {\n    return this.map(function (x) {\n      return x * k;\n    });\n  },\n  elementMultiply: function (v) {\n    return this.map(function (k, i) {\n      return v.e(i) * k;\n    });\n  },\n  sum: function () {\n    var sum = 0;\n    this.map(function (x) {\n      sum += x;\n    });\n    return sum;\n  },\n  chomp: function (n) {\n    var elements = [];\n\n    for (var i = n; i < this.elements.length; i++) {\n      elements.push(this.elements[i]);\n    }\n\n    return Vector.create(elements);\n  },\n  top: function (n) {\n    var elements = [];\n\n    for (var i = 0; i < n; i++) {\n      elements.push(this.elements[i]);\n    }\n\n    return Vector.create(elements);\n  },\n  augment: function (elements) {\n    var newElements = this.elements;\n\n    for (var i = 0; i < elements.length; i++) {\n      newElements.push(elements[i]);\n    }\n\n    return Vector.create(newElements);\n  },\n  x: function (k) {\n    return this.multiply(k);\n  },\n  log: function () {\n    return Vector.log(this);\n  },\n  elementDivide: function (vector) {\n    return this.map(function (v, i) {\n      return v / vector.e(i);\n    });\n  },\n  product: function () {\n    var p = 1;\n    this.map(function (v) {\n      p *= v;\n    });\n    return p;\n  },\n  // Returns the scalar product of the vector with the argument\n  // Both vectors must have equal dimensionality\n  dot: function (vector) {\n    var V = vector.elements || vector;\n    var i,\n        product = 0,\n        n = this.elements.length;\n\n    if (n != V.length) {\n      return null;\n    }\n\n    while (n--) {\n      product += this.elements[n] * V[n];\n    }\n\n    return product;\n  },\n  // Returns the vector product of the vector with the argument\n  // Both vectors must have dimensionality 3\n  cross: function (vector) {\n    var B = vector.elements || vector;\n\n    if (this.elements.length != 3 || B.length != 3) {\n      return null;\n    }\n\n    var A = this.elements;\n    return Vector.create([A[1] * B[2] - A[2] * B[1], A[2] * B[0] - A[0] * B[2], A[0] * B[1] - A[1] * B[0]]);\n  },\n  // Returns the (absolute) largest element of the vector\n  max: function () {\n    var m = 0,\n        i = this.elements.length;\n\n    while (i--) {\n      if (Math.abs(this.elements[i]) > Math.abs(m)) {\n        m = this.elements[i];\n      }\n    }\n\n    return m;\n  },\n  maxIndex: function () {\n    var m = 0,\n        i = this.elements.length;\n    var maxIndex = -1;\n\n    while (i--) {\n      if (Math.abs(this.elements[i]) > Math.abs(m)) {\n        m = this.elements[i];\n        maxIndex = i + 1;\n      }\n    }\n\n    return maxIndex;\n  },\n  // Returns the index of the first match found\n  indexOf: function (x) {\n    var index = null,\n        n = this.elements.length;\n\n    for (var i = 0; i < n; i++) {\n      if (index === null && this.elements[i] == x) {\n        index = i + 1;\n      }\n    }\n\n    return index;\n  },\n  // Returns a diagonal matrix with the vector's elements as its diagonal elements\n  toDiagonalMatrix: function () {\n    return Matrix.Diagonal(this.elements);\n  },\n  // Returns the result of rounding the elements of the vector\n  round: function () {\n    return this.map(function (x) {\n      return Math.round(x);\n    });\n  },\n  // Transpose a Vector, return a 1xn Matrix\n  transpose: function () {\n    var rows = this.elements.length;\n    var elements = [];\n\n    for (var i = 0; i < rows; i++) {\n      elements.push([this.elements[i]]);\n    }\n\n    return Matrix.create(elements);\n  },\n  // Returns a copy of the vector with elements set to the given value if they\n  // differ from it by less than Sylvester.precision\n  snapTo: function (x) {\n    return this.map(function (y) {\n      return Math.abs(y - x) <= Sylvester.precision ? x : y;\n    });\n  },\n  // Returns the vector's distance from the argument, when considered as a point in space\n  distanceFrom: function (obj) {\n    if (obj.anchor || obj.start && obj.end) {\n      return obj.distanceFrom(this);\n    }\n\n    var V = obj.elements || obj;\n\n    if (V.length != this.elements.length) {\n      return null;\n    }\n\n    var sum = 0,\n        part;\n    this.each(function (x, i) {\n      part = x - V[i - 1];\n      sum += part * part;\n    });\n    return Math.sqrt(sum);\n  },\n  // Returns true if the vector is point on the given line\n  liesOn: function (line) {\n    return line.contains(this);\n  },\n  // Return true iff the vector is a point in the given plane\n  liesIn: function (plane) {\n    return plane.contains(this);\n  },\n  // Rotates the vector about the given object. The object should be a\n  // point if the vector is 2D, and a line if it is 3D. Be careful with line directions!\n  rotate: function (t, obj) {\n    var V,\n        R = null,\n        x,\n        y,\n        z;\n\n    if (t.determinant) {\n      R = t.elements;\n    }\n\n    switch (this.elements.length) {\n      case 2:\n        V = obj.elements || obj;\n\n        if (V.length != 2) {\n          return null;\n        }\n\n        if (!R) {\n          R = Matrix.Rotation(t).elements;\n        }\n\n        x = this.elements[0] - V[0];\n        y = this.elements[1] - V[1];\n        return Vector.create([V[0] + R[0][0] * x + R[0][1] * y, V[1] + R[1][0] * x + R[1][1] * y]);\n        break;\n\n      case 3:\n        if (!obj.direction) {\n          return null;\n        }\n\n        var C = obj.pointClosestTo(this).elements;\n\n        if (!R) {\n          R = Matrix.Rotation(t, obj.direction).elements;\n        }\n\n        x = this.elements[0] - C[0];\n        y = this.elements[1] - C[1];\n        z = this.elements[2] - C[2];\n        return Vector.create([C[0] + R[0][0] * x + R[0][1] * y + R[0][2] * z, C[1] + R[1][0] * x + R[1][1] * y + R[1][2] * z, C[2] + R[2][0] * x + R[2][1] * y + R[2][2] * z]);\n        break;\n\n      default:\n        return null;\n    }\n  },\n  // Returns the result of reflecting the point in the given point, line or plane\n  reflectionIn: function (obj) {\n    if (obj.anchor) {\n      // obj is a plane or line\n      var P = this.elements.slice();\n      var C = obj.pointClosestTo(P).elements;\n      return Vector.create([C[0] + (C[0] - P[0]), C[1] + (C[1] - P[1]), C[2] + (C[2] - (P[2] || 0))]);\n    } else {\n      // obj is a point\n      var Q = obj.elements || obj;\n\n      if (this.elements.length != Q.length) {\n        return null;\n      }\n\n      return this.map(function (x, i) {\n        return Q[i - 1] + (Q[i - 1] - x);\n      });\n    }\n  },\n  // Utility to make sure vectors are 3D. If they are 2D, a zero z-component is added\n  to3D: function () {\n    var V = this.dup();\n\n    switch (V.elements.length) {\n      case 3:\n        break;\n\n      case 2:\n        V.elements.push(0);\n        break;\n\n      default:\n        return null;\n    }\n\n    return V;\n  },\n  // Returns a string representation of the vector\n  inspect: function () {\n    return '[' + this.elements.join(', ') + ']';\n  },\n  // Set vector's elements from an array\n  setElements: function (els) {\n    this.elements = (els.elements || els).slice();\n    return this;\n  }\n}; // Constructor function\n\nVector.create = function (elements) {\n  var V = new Vector();\n  return V.setElements(elements);\n}; // i, j, k unit vectors\n\n\nVector.i = Vector.create([1, 0, 0]);\nVector.j = Vector.create([0, 1, 0]);\nVector.k = Vector.create([0, 0, 1]); // Random vector of size n\n\nVector.Random = function (n) {\n  var elements = [];\n\n  while (n--) {\n    elements.push(Math.random());\n  }\n\n  return Vector.create(elements);\n};\n\nVector.Fill = function (n, v) {\n  var elements = [];\n\n  while (n--) {\n    elements.push(v);\n  }\n\n  return Vector.create(elements);\n}; // Vector filled with zeros\n\n\nVector.Zero = function (n) {\n  return Vector.Fill(n, 0);\n};\n\nVector.One = function (n) {\n  return Vector.Fill(n, 1);\n};\n\nVector.log = function (v) {\n  return v.map(function (x) {\n    return Math.log(x);\n  });\n};\n\nmodule.exports = Vector;","map":{"version":3,"sources":["/Users/merjem/chat_application/react/node_modules/sylvester/lib/node-sylvester/vector.js"],"names":["Sylvester","require","Matrix","Vector","prototype","norm","n","elements","length","sum","Math","pow","sqrt","e","i","dimensions","rows","cols","modulus","dot","eql","vector","V","abs","precision","dup","create","map","fn","each","x","push","toUnitVector","r","angleFrom","k","mod1","mod2","theta","acos","isParallelTo","angle","isAntiparallelTo","PI","isPerpendicularTo","add","value","v","subtract","multiply","elementMultiply","chomp","top","augment","newElements","log","elementDivide","product","p","cross","B","A","max","m","maxIndex","indexOf","index","toDiagonalMatrix","Diagonal","round","transpose","snapTo","y","distanceFrom","obj","anchor","start","end","part","liesOn","line","contains","liesIn","plane","rotate","t","R","z","determinant","Rotation","direction","C","pointClosestTo","reflectionIn","P","slice","Q","to3D","inspect","join","setElements","els","j","Random","random","Fill","Zero","One","module","exports"],"mappings":"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","sourcesContent":["// Copyright (c) 2011, Chris Umbel, James Coglan\n// This file is required in order for any other classes to work. Some Vector methods work with the\n// other Sylvester classes and are useless unless they are included. Other classes such as Line and\n// Plane will not function at all without Vector being loaded first.\n\nvar Sylvester = require('./sylvester'),\nMatrix = require('./matrix');\n\nfunction Vector() {}\nVector.prototype = {\n\n    norm: function() {\n\tvar n = this.elements.length;\n\tvar sum = 0;\n\n\twhile (n--) {\n\t    sum += Math.pow(this.elements[n], 2);\n\t}\n\n\treturn Math.sqrt(sum);\n    },\n\n    // Returns element i of the vector\n    e: function(i) {\n      return (i < 1 || i > this.elements.length) ? null : this.elements[i - 1];\n    },\n\n    // Returns the number of rows/columns the vector has\n    dimensions: function() {\n      return {rows: 1, cols: this.elements.length};\n    },\n\n    // Returns the number of rows in the vector\n    rows: function() {\n      return 1;\n    },\n\n    // Returns the number of columns in the vector\n    cols: function() {\n      return this.elements.length;\n    },\n\n    // Returns the modulus ('length') of the vector\n    modulus: function() {\n      return Math.sqrt(this.dot(this));\n    },\n\n    // Returns true iff the vector is equal to the argument\n    eql: function(vector) {\n    \tvar n = this.elements.length;\n    \tvar V = vector.elements || vector;\n    \tif (n != V.length) { return false; }\n    \twhile (n--) {\n    \t    if (Math.abs(this.elements[n] - V[n]) > Sylvester.precision) { return false; }\n    \t}\n    \treturn true;\n    },\n\n    // Returns a copy of the vector\n    dup: function() {\n\t    return Vector.create(this.elements);\n    },\n\n    // Maps the vector to another vector according to the given function\n    map: function(fn) {\n\tvar elements = [];\n\tthis.each(function(x, i) {\n\t    elements.push(fn(x, i));\n\t});\n\treturn Vector.create(elements);\n    },\n\n    // Calls the iterator for each element of the vector in turn\n    each: function(fn) {\n\tvar n = this.elements.length;\n\tfor (var i = 0; i < n; i++) {\n\t    fn(this.elements[i], i + 1);\n\t}\n    },\n\n    // Returns a new vector created by normalizing the receiver\n    toUnitVector: function() {\n\tvar r = this.modulus();\n\tif (r === 0) { return this.dup(); }\n\treturn this.map(function(x) { return x / r; });\n    },\n\n    // Returns the angle between the vector and the argument (also a vector)\n    angleFrom: function(vector) {\n\tvar V = vector.elements || vector;\n\tvar n = this.elements.length, k = n, i;\n\tif (n != V.length) { return null; }\n\tvar dot = 0, mod1 = 0, mod2 = 0;\n\t// Work things out in parallel to save time\n\tthis.each(function(x, i) {\n\t    dot += x * V[i - 1];\n\t    mod1 += x * x;\n\t    mod2 += V[i - 1] * V[i - 1];\n\t});\n\tmod1 = Math.sqrt(mod1); mod2 = Math.sqrt(mod2);\n\tif (mod1 * mod2 === 0) { return null; }\n\tvar theta = dot / (mod1 * mod2);\n\tif (theta < -1) { theta = -1; }\n\tif (theta > 1) { theta = 1; }\n\treturn Math.acos(theta);\n    },\n\n    // Returns true iff the vector is parallel to the argument\n    isParallelTo: function(vector) {\n\tvar angle = this.angleFrom(vector);\n\treturn (angle === null) ? null : (angle <= Sylvester.precision);\n    },\n\n    // Returns true iff the vector is antiparallel to the argument\n    isAntiparallelTo: function(vector) {\n\tvar angle = this.angleFrom(vector);\n\treturn (angle === null) ? null : (Math.abs(angle - Math.PI) <= Sylvester.precision);\n    },\n\n    // Returns true iff the vector is perpendicular to the argument\n    isPerpendicularTo: function(vector) {\n\tvar dot = this.dot(vector);\n\treturn (dot === null) ? null : (Math.abs(dot) <= Sylvester.precision);\n    },\n\n    // Returns the result of adding the argument to the vector\n    add: function(value) {\n\tvar V = value.elements || value;\n\n\tif (this.elements.length != V.length) \n\t    return this.map(function(v) { return v + value });\n\telse\n\t    return this.map(function(x, i) { return x + V[i - 1]; });\n    },\n\n    // Returns the result of subtracting the argument from the vector\n    subtract: function(v) {\n\tif (typeof(v) == 'number')\n\t    return this.map(function(k) { return k - v; });\n\n\tvar V = v.elements || v;\n\tif (this.elements.length != V.length) { return null; }\n\treturn this.map(function(x, i) { return x - V[i - 1]; });\n    },\n\n    // Returns the result of multiplying the elements of the vector by the argument\n    multiply: function(k) {\n\treturn this.map(function(x) { return x * k; });\n    },\n\n    elementMultiply: function(v) {\n\treturn this.map(function(k, i) {\n\t    return v.e(i) * k;\n\t});\n    },\n\n    sum: function() {\n\tvar sum = 0;\n\tthis.map(function(x) { sum += x;});\n\treturn sum;\n    },\n\n    chomp: function(n) {\n\tvar elements = [];\n\n\tfor (var i = n; i < this.elements.length; i++) {\n\t    elements.push(this.elements[i]);\n\t}\n\n\treturn Vector.create(elements);\n    },\n\n    top: function(n) {\n\tvar elements = [];\n\n\tfor (var i = 0; i < n; i++) {\n\t    elements.push(this.elements[i]);\n\t}\n\n\treturn Vector.create(elements);\n    },\n\n    augment: function(elements) {\n\tvar newElements = this.elements;\n\n\tfor (var i = 0; i < elements.length; i++) {\n\t    newElements.push(elements[i]);\n\t}\n\n\treturn Vector.create(newElements);\n    },\n\n    x: function(k) { return this.multiply(k); },\n\n    log: function() {\n\treturn Vector.log(this);\n    },\n\n    elementDivide: function(vector) {\n\treturn this.map(function(v, i) {\n\t    return v / vector.e(i);\n\t});\n    },\n\n    product: function() {\n\tvar p = 1;\n\n\tthis.map(function(v) {\n\t    p *= v;\n\t});\n\n\treturn p;\n    },\n\n    // Returns the scalar product of the vector with the argument\n    // Both vectors must have equal dimensionality\n    dot: function(vector) {\n\tvar V = vector.elements || vector;\n\tvar i, product = 0, n = this.elements.length;\t\n\tif (n != V.length) { return null; }\n\twhile (n--) { product += this.elements[n] * V[n]; }\n\treturn product;\n    },\n\n    // Returns the vector product of the vector with the argument\n    // Both vectors must have dimensionality 3\n    cross: function(vector) {\n\tvar B = vector.elements || vector;\n\tif (this.elements.length != 3 || B.length != 3) { return null; }\n\tvar A = this.elements;\n\treturn Vector.create([\n\t    (A[1] * B[2]) - (A[2] * B[1]),\n\t    (A[2] * B[0]) - (A[0] * B[2]),\n\t    (A[0] * B[1]) - (A[1] * B[0])\n\t]);\n    },\n\n    // Returns the (absolute) largest element of the vector\n    max: function() {\n\tvar m = 0, i = this.elements.length;\n\twhile (i--) {\n\t    if (Math.abs(this.elements[i]) > Math.abs(m)) { m = this.elements[i]; }\n\t}\n\treturn m;\n    },\n\n\n    maxIndex: function() {\n\tvar m = 0, i = this.elements.length;\n\tvar maxIndex = -1;\n\n\twhile (i--) {\n\t    if (Math.abs(this.elements[i]) > Math.abs(m)) { \n\t\tm = this.elements[i]; \n\t\tmaxIndex = i + 1;\n\t    }\n\t}\n\n\treturn maxIndex;\n    },\n\n\n    // Returns the index of the first match found\n    indexOf: function(x) {\n\tvar index = null, n = this.elements.length;\n\tfor (var i = 0; i < n; i++) {\n\t    if (index === null && this.elements[i] == x) {\n\t\tindex = i + 1;\n\t    }\n\t}\n\treturn index;\n    },\n\n    // Returns a diagonal matrix with the vector's elements as its diagonal elements\n    toDiagonalMatrix: function() {\n\treturn Matrix.Diagonal(this.elements);\n    },\n\n    // Returns the result of rounding the elements of the vector\n    round: function() {\n\treturn this.map(function(x) { return Math.round(x); });\n    },\n\n    // Transpose a Vector, return a 1xn Matrix\n    transpose: function() {\n\tvar rows = this.elements.length;\n\tvar elements = [];\n\n\tfor (var i = 0; i < rows; i++) {\n\t    elements.push([this.elements[i]]);\n\t}\n\treturn Matrix.create(elements);\n    },\n\n    // Returns a copy of the vector with elements set to the given value if they\n    // differ from it by less than Sylvester.precision\n    snapTo: function(x) {\n\treturn this.map(function(y) {\n\t    return (Math.abs(y - x) <= Sylvester.precision) ? x : y;\n\t});\n    },\n\n    // Returns the vector's distance from the argument, when considered as a point in space\n    distanceFrom: function(obj) {\n\tif (obj.anchor || (obj.start && obj.end)) { return obj.distanceFrom(this); }\n\tvar V = obj.elements || obj;\n\tif (V.length != this.elements.length) { return null; }\n\tvar sum = 0, part;\n\tthis.each(function(x, i) {\n\t    part = x - V[i - 1];\n\t    sum += part * part;\n\t});\n\treturn Math.sqrt(sum);\n    },\n\n    // Returns true if the vector is point on the given line\n    liesOn: function(line) {\n\treturn line.contains(this);\n    },\n\n    // Return true iff the vector is a point in the given plane\n    liesIn: function(plane) {\n\treturn plane.contains(this);\n    },\n\n    // Rotates the vector about the given object. The object should be a\n    // point if the vector is 2D, and a line if it is 3D. Be careful with line directions!\n    rotate: function(t, obj) {\n\tvar V, R = null, x, y, z;\n\tif (t.determinant) { R = t.elements; }\n\tswitch (this.elements.length) {\n\tcase 2:\n            V = obj.elements || obj;\n            if (V.length != 2) { return null; }\n            if (!R) { R = Matrix.Rotation(t).elements; }\n            x = this.elements[0] - V[0];\n            y = this.elements[1] - V[1];\n            return Vector.create([\n\t\tV[0] + R[0][0] * x + R[0][1] * y,\n\t\tV[1] + R[1][0] * x + R[1][1] * y\n            ]);\n            break;\n\tcase 3:\n            if (!obj.direction) { return null; }\n            var C = obj.pointClosestTo(this).elements;\n            if (!R) { R = Matrix.Rotation(t, obj.direction).elements; }\n            x = this.elements[0] - C[0];\n            y = this.elements[1] - C[1];\n            z = this.elements[2] - C[2];\n            return Vector.create([\n\t\tC[0] + R[0][0] * x + R[0][1] * y + R[0][2] * z,\n\t\tC[1] + R[1][0] * x + R[1][1] * y + R[1][2] * z,\n\t\tC[2] + R[2][0] * x + R[2][1] * y + R[2][2] * z\n            ]);\n            break;\n\tdefault:\n            return null;\n\t}\n    },\n\n    // Returns the result of reflecting the point in the given point, line or plane\n    reflectionIn: function(obj) {\n\tif (obj.anchor) {\n\t    // obj is a plane or line\n\t    var P = this.elements.slice();\n\t    var C = obj.pointClosestTo(P).elements;\n\t    return Vector.create([C[0] + (C[0] - P[0]), C[1] + (C[1] - P[1]), C[2] + (C[2] - (P[2] || 0))]);\n\t} else {\n\t    // obj is a point\n\t    var Q = obj.elements || obj;\n\t    if (this.elements.length != Q.length) { return null; }\n\t    return this.map(function(x, i) { return Q[i - 1] + (Q[i - 1] - x); });\n\t}\n    },\n\n    // Utility to make sure vectors are 3D. If they are 2D, a zero z-component is added\n    to3D: function() {\n\tvar V = this.dup();\n\tswitch (V.elements.length) {\n\tcase 3: break;\n\tcase 2: V.elements.push(0); break;\n\tdefault: return null;\n\t}\n\treturn V;\n    },\n\n    // Returns a string representation of the vector\n    inspect: function() {\n\treturn '[' + this.elements.join(', ') + ']';\n    },\n\n    // Set vector's elements from an array\n    setElements: function(els) {\n\tthis.elements = (els.elements || els).slice();\n\treturn this;\n    }\n};\n\n// Constructor function\nVector.create = function(elements) {\n    var V = new Vector();\n    return V.setElements(elements);\n};\n\n// i, j, k unit vectors\nVector.i = Vector.create([1, 0, 0]);\nVector.j = Vector.create([0, 1, 0]);\nVector.k = Vector.create([0, 0, 1]);\n\n// Random vector of size n\nVector.Random = function(n) {\n    var elements = [];\n    while (n--) { elements.push(Math.random()); }\n    return Vector.create(elements);\n};\n\nVector.Fill = function(n, v) {\n    var elements = [];\n    while (n--) { elements.push(v); }\n    return Vector.create(elements);\n};\n\n// Vector filled with zeros\nVector.Zero = function(n) {\n    return Vector.Fill(n, 0);\n};\n\nVector.One = function(n) {\n    return Vector.Fill(n, 1);\n};\n\nVector.log = function(v) {\n    return v.map(function(x) {\n\treturn Math.log(x);\n    });\n};\n\nmodule.exports = Vector;\n"]},"metadata":{},"sourceType":"script"}