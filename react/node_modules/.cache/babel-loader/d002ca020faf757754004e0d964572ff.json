{"ast":null,"code":"/*\n Copyright (c) 2014, Lee Wenzhu\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\n'use strict';\n\nvar EdgeWeightedDigraph = require('./edge_weighted_digraph'),\n    Topological = require('./topological');\n/**\n  *  The ShortestPathTree represents a data type for solving the\n  *  single-source shortest paths problem in edge-weighted directed\n  *  acyclic graphs (DAGs). The edge weights can be positive, negative, or zero.\n  *  This implementation uses a topological-sort based algorithm.\n  *  the distTo() and hasPathTo() methods take\n  *  constant time and the pathTo() method takes time proportional to the\n  *  number of edges in the longest path returned.\n  */\n\n\nvar ShortestPathTree = function (digraph, start) {\n  var _this = this;\n\n  this.edgeTo = [];\n  this.distTo = [];\n  this.distTo[start] = 0.0;\n  this.start = start;\n  this.top = new Topological(digraph);\n  this.top.order().forEach(function (vertex) {\n    _this.relaxVertex(digraph, vertex, _this);\n  });\n};\n\nShortestPathTree.prototype.relaxEdge = function (e) {\n  var distTo = this.distTo,\n      edgeTo = this.edgeTo;\n  var v = e.from(),\n      w = e.to();\n\n  if (distTo[w] > distTo[v] + e.weight) {\n    distTo[w] = distTo[v] + e.weight;\n    edgeTo[w] = e;\n  }\n};\n/**\n * relax a vertex v in the specified digraph g\n * @param {EdgeWeightedDigraph} the apecified digraph\n * @param {Vertex} v vertex to be relaxed\n */\n\n\nShortestPathTree.prototype.relaxVertex = function (digraph, vertex, tree) {\n  var distTo = tree.distTo;\n  var edgeTo = tree.edgeTo;\n  digraph.getAdj(vertex).forEach(function (edge) {\n    var w = edge.to();\n    distTo[w] = /\\d/.test(distTo[w]) ? distTo[w] : Number.MAX_VALUE;\n    distTo[vertex] = distTo[vertex] || 0;\n\n    if (distTo[w] > distTo[vertex] + edge.weight) {\n      // in case of the result of 0.28+0.34 is 0.62000001\n      distTo[w] = parseFloat((distTo[vertex] + edge.weight).toFixed(2));\n      edgeTo[w] = edge;\n    }\n  });\n};\n\nShortestPathTree.prototype.getDistTo = function (v) {\n  return this.distTo[v];\n};\n\nShortestPathTree.prototype.hasPathTo = function (v) {\n  var dist = this.distTo[v];\n  if (v == this.start) return false;\n  return /\\d/.test(dist) ? dist != Number.MAX_VALUE : false;\n};\n\nShortestPathTree.prototype.pathTo = function (v) {\n  if (!this.hasPathTo(v) || v == this.start) return [];\n  var path = [];\n  var edgeTo = this.edgeTo;\n\n  for (var e = edgeTo[v]; !!e; e = edgeTo[e.from()]) {\n    path.push(e.to());\n  }\n\n  path.push(this.start);\n  return path.reverse();\n};\n\nmodule.exports = ShortestPathTree;","map":{"version":3,"sources":["/Users/merjem/chat_application/react/node_modules/natural/lib/natural/util/shortest_path_tree.js"],"names":["EdgeWeightedDigraph","require","Topological","ShortestPathTree","digraph","start","_this","edgeTo","distTo","top","order","forEach","vertex","relaxVertex","prototype","relaxEdge","e","v","from","w","to","weight","tree","getAdj","edge","test","Number","MAX_VALUE","parseFloat","toFixed","getDistTo","hasPathTo","dist","pathTo","path","push","reverse","module","exports"],"mappings":"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","sourcesContent":["/*\n Copyright (c) 2014, Lee Wenzhu\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\n'use strict';\n\nvar EdgeWeightedDigraph = require('./edge_weighted_digraph'),\n    Topological = require('./topological');\n\n/**\n  *  The ShortestPathTree represents a data type for solving the\n  *  single-source shortest paths problem in edge-weighted directed\n  *  acyclic graphs (DAGs). The edge weights can be positive, negative, or zero.\n  *  This implementation uses a topological-sort based algorithm.\n  *  the distTo() and hasPathTo() methods take\n  *  constant time and the pathTo() method takes time proportional to the\n  *  number of edges in the longest path returned.\n  */\nvar ShortestPathTree = function(digraph, start) {\n    var _this = this;\n    this.edgeTo = [];\n    this.distTo = [];\n    this.distTo[start] = 0.0;\n    this.start = start;\n    this.top = new Topological(digraph);\n    this.top.order().forEach(function(vertex){\n        _this.relaxVertex(digraph, vertex, _this);\n    });\n};\n\nShortestPathTree.prototype.relaxEdge = function(e) {\n    var distTo = this.distTo,\n        edgeTo = this.edgeTo;\n    var v = e.from(), w = e.to();\n    if (distTo[w] > distTo[v] + e.weight) {\n        distTo[w] = distTo[v] + e.weight;\n        edgeTo[w] = e;\n    }\n};\n\n/**\n * relax a vertex v in the specified digraph g\n * @param {EdgeWeightedDigraph} the apecified digraph\n * @param {Vertex} v vertex to be relaxed\n */\nShortestPathTree.prototype.relaxVertex = function(digraph, vertex, tree) {\n    var distTo = tree.distTo;\n    var edgeTo = tree.edgeTo;\n    digraph.getAdj(vertex).forEach(function(edge){\n        var w = edge.to();\n        distTo[w] = /\\d/.test(distTo[w]) ? distTo[w] : Number.MAX_VALUE;\n        distTo[vertex] = distTo[vertex] || 0;\n        if (distTo[w] > distTo[vertex] + edge.weight) {\n            // in case of the result of 0.28+0.34 is 0.62000001\n            distTo[w] = parseFloat((distTo[vertex] + edge.weight).toFixed(2));\n            edgeTo[w] = edge;\n        }\n    });\n\n};\n\nShortestPathTree.prototype.getDistTo = function(v) {\n    return this.distTo[v];\n};\n\nShortestPathTree.prototype.hasPathTo = function(v) {\n    var dist = this.distTo[v];\n    if(v == this.start) return false;\n    return /\\d/.test(dist) ? dist != Number.MAX_VALUE : false;\n};\n\nShortestPathTree.prototype.pathTo = function(v) {\n    if (!this.hasPathTo(v) || v == this.start) return [];\n    var path = [];\n    var edgeTo = this.edgeTo;\n    for (var e = edgeTo[v]; !!e; e = edgeTo[e.from()]) {\n        path.push(e.to());\n    }\n    path.push(this.start);\n    return path.reverse();\n};\n\nmodule.exports = ShortestPathTree;\n"]},"metadata":{},"sourceType":"script"}