{"ast":null,"code":"/* -*- js-indent-level: 4; -*- */\n\"use strict\";\n\nvar well1024a = require('prng-well1024a'); // ---- IF BROWSER, CUT ALONG LINE ----\n\n\nvar randy = function () {\n  // ---- IF BROWSER, INSERT WELL-1024A HERE ----\n  function instantiate(initState) {\n    var entropy;\n\n    if (typeof window == \"undefined\") {\n      // NodeJs mode\n      var os = require(\"os\");\n\n      var crypto = require(\"crypto\");\n\n      var mu = process.memoryUsage();\n      var la = os.loadavg();\n      var crb = crypto.randomBytes(4);\n      var cryptoRand = 0x01000000 * crb[0] + 0x00010000 * crb[1] + 0x00000100 * crb[2] + 0x00000001 * crb[3];\n      var osUptime = os.uptime ? os.uptime() : 0;\n      var processUptime = process.uptime ? process.uptime() : osUptime;\n      entropy = [cryptoRand, new Date().getTime(), process.pid, Math.floor(processUptime * 16777216), mu.rss, mu.heapTotal, mu.heapUsed, Math.floor(osUptime * 16777216), Math.floor(la[0] * 4294967296), Math.floor(la[1] * 4294967296), Math.floor(la[2] * 4294967296), os.totalmem(), os.freemem()];\n    } else {\n      // Browser mode\n      entropy = [new Date().getTime() % 4294967296, window.history.length, window.outerHeight, window.outerWidth, window.screenX, window.screenY, window.screen.availWidth, window.screen.availHeight, window.screen.height, window.screen.width];\n    }\n\n    var generator = well1024a(entropy);\n    var instance = attachFunctions(generator);\n    instance.instance = instantiate;\n    if (initState) instance.setState(initState);\n    return instance;\n  }\n  /* Parameter getUInt32 must be a PRNG returning a random unsigned\n   * 32-bit integer. */\n\n\n  function attachFunctions(generator) {\n    var getUInt32 = generator.getUInt32;\n    /* Use _randInt32 if max < 2^32, _randInt53 otherwise.  If max\n     * is not specified, assume 2^32. */\n\n    function _randInt(max) {\n      if (max > 0xffffffff) // false for max=undefined|function\n        return _randInt53(max);\n      return _randInt32(max);\n    }\n\n    _randInt.defaultPrecision = 32;\n    /* Use 53-bit precision.  If max is not specified, assume 2^53. */\n\n    function _randInt53(max) {\n      var r = getUInt32() + (getUInt32() >>> 11) * 0x100000000;\n      if (typeof max === 'undefined') return r;\n      return r % max;\n    }\n\n    _randInt53.defaultPrecision = 53;\n    /* Use 32-bit precision.  If max is not specified, assume 2^32. */\n\n    function _randInt32(max) {\n      var r = getUInt32();\n      if (typeof max === 'undefined') return r;\n      return r % max;\n    }\n\n    _randInt32.defaultPrecision = 32;\n    /* Use as little precision as is needed to generate a\n     * completely uniform distribution from the PRNG to the target\n     * range.  Can be very slow to execute.  If max is not\n     * specified, assume 2^53. */\n\n    function _randIntUniform(max) {\n      if (typeof max === 'undefined') return _randInt53();\n      if (max == 0) return 0;\n      var log2 = 0;\n      var mult = 1;\n\n      while (mult < max) {\n        log2 += 1;\n        mult *= 2;\n      }\n\n      for (var r = max; r >= max; r = getRandBits(log2));\n\n      return r;\n    }\n    /* Returns a random integer with precision 2^n, where n <= 53. */\n\n\n    function getRandBits(n) {\n      if (n === 0) return 0;\n\n      function getBits32() {\n        var r = _randInt32();\n\n        return r >>> 32 - n;\n      }\n\n      function getBits53() {\n        var r1 = _randInt32() >>> 53 - n;\n\n        var r2 = _randInt32();\n\n        return r2 + (r1 >>> 11) * 0x100000000;\n      }\n\n      if (n > 32) return getBits53();\n      return getBits32();\n    }\n\n    function wrapWithPrecision(baseRandInt) {\n      // Smallest float > 0 that we can uniformly generate with\n      // the random generator's precision.\n      var MIN_FLOAT = 1 / Math.pow(2, baseRandInt.defaultPrecision);\n      /* Returns a random integer i, such that min <= i < max.\n       *\n       * If only one parameter is supplied, it is assumed to be max,\n       * and min will be 0.\n       *\n       * If no parameters are supplied, min is assumed to be 0, and\n       * max is assumed to be 2^53.  I.e. bounded by largest\n       * possible integer value. */\n\n      function randInt(min, max, step) {\n        if (typeof min == 'undefined') return baseRandInt();\n\n        if (typeof max == 'undefined') {\n          max = min;\n          min = 0;\n        }\n\n        if (typeof step === 'undefined') {\n          return min + baseRandInt(max - min);\n        }\n\n        var span = Math.ceil((max - min) / step);\n        return min + baseRandInt(span) * step;\n      }\n      /* Returns a random element from the array arr.  If arr is\n       * empty, throws an exception. */\n\n\n      function choice(arr) {\n        if (!arr.length) throw \"arr not an array of length > 0\";\n        return arr[baseRandInt(arr.length)];\n      }\n      /* Returns a shuffled copy of the array arr.  For\n       * algorithm details, see shuffleInplace. */\n\n\n      function shuffle(arr) {\n        var arrCopy = arr.slice();\n        shuffleInplace(arrCopy);\n        return arrCopy;\n      }\n      /* Shuffle the array arr in place.  Uses the Fisher-Yates\n       * shuffle, aka the Knuth shuffle. */\n\n\n      function shuffleInplace(arr) {\n        var j, tmp;\n\n        for (var i = arr.length - 1; i > 0; i--) {\n          j = baseRandInt(i + 1);\n          tmp = arr[i];\n          arr[i] = arr[j];\n          arr[j] = tmp;\n        }\n      }\n      /* Returns an array of length count, containing unique\n       * elements chosen from the array population.  Like a\n       * raffle draw.\n       *\n       * Mathematically equivalent to\n       * shuffle(population).slice(0, count), but more\n       * efficient.  Catches fire if count >\n       * population.length. */\n\n\n      function sample(population, count) {\n        var arr = population.slice();\n        var j,\n            tmp,\n            ln = arr.length;\n\n        for (var i = ln - 1; i > ln - count - 1; i--) {\n          j = baseRandInt(i + 1);\n          tmp = arr[i];\n          arr[i] = arr[j];\n          arr[j] = tmp;\n        }\n\n        return arr.slice(ln - count);\n      }\n      /* Returns a floating point number f such that 0.0 <= f < 1.0 */\n\n\n      function random() {\n        return MIN_FLOAT * baseRandInt();\n      }\n      /* Returns a floating point number f such that min <= f < max. */\n\n\n      function uniform(min, max) {\n        if (typeof min == 'undefined') min = 0;\n\n        if (typeof max == 'undefined') {\n          max = min;\n          min = 0;\n        }\n\n        return min + random() * (max - min);\n      }\n      /* The triangular distribution is typically used as a\n       * subjective description of a population for which there\n       * is only limited sample data, and especially in cases\n       * where the relationship between variables is known but\n       * data is scarce (possibly because of the high cost of\n       * collection). It is based on a knowledge of the minimum\n       * and maximum and an \"inspired guess\" as to the modal\n       * value.\n       *\n       * http://en.wikipedia.org/wiki/Triangular_distribution */\n\n\n      function triangular(min, max, mode) {\n        if (typeof min == 'undefined') min = 0;\n\n        if (typeof max == 'undefined') {\n          max = min;\n          min = 0;\n        }\n\n        if (typeof mode == 'undefined') mode = min + (max - min) / 2;\n        var u = random();\n\n        if (u < (mode - min) / (max - min)) {\n          return min + Math.sqrt(u * (max - min) * (mode - min));\n        } else {\n          return max - Math.sqrt((1 - u) * (max - min) * (max - mode));\n        }\n      }\n\n      return {\n        'randInt': randInt,\n        'choice': choice,\n        'shuffle': shuffle,\n        'shuffleInplace': shuffleInplace,\n        'sample': sample,\n        'random': random,\n        'uniform': uniform,\n        'triangular': triangular,\n        'getRandBits': getRandBits\n      };\n    }\n\n    var fastFuns = wrapWithPrecision(_randInt, 0x100000000);\n    var goodFuns = wrapWithPrecision(_randInt53, 0x20000000000000);\n    var bestFuns = wrapWithPrecision(_randIntUniform, 0x20000000000000);\n    fastFuns.good = goodFuns;\n    fastFuns.best = bestFuns;\n    fastFuns.getState = generator.getState;\n    fastFuns.setState = generator.setState;\n    return fastFuns;\n  }\n\n  if (typeof module !== \"undefined\") {\n    module.exports = instantiate();\n  } else {\n    return instantiate();\n  }\n}();","map":{"version":3,"sources":["/Users/merjem/chat_application/react/node_modules/randy/lib/randy.js"],"names":["well1024a","require","randy","instantiate","initState","entropy","window","os","crypto","mu","process","memoryUsage","la","loadavg","crb","randomBytes","cryptoRand","osUptime","uptime","processUptime","Date","getTime","pid","Math","floor","rss","heapTotal","heapUsed","totalmem","freemem","history","length","outerHeight","outerWidth","screenX","screenY","screen","availWidth","availHeight","height","width","generator","instance","attachFunctions","setState","getUInt32","_randInt","max","_randInt53","_randInt32","defaultPrecision","r","_randIntUniform","log2","mult","getRandBits","n","getBits32","getBits53","r1","r2","wrapWithPrecision","baseRandInt","MIN_FLOAT","pow","randInt","min","step","span","ceil","choice","arr","shuffle","arrCopy","slice","shuffleInplace","j","tmp","i","sample","population","count","ln","random","uniform","triangular","mode","u","sqrt","fastFuns","goodFuns","bestFuns","good","best","getState","module","exports"],"mappings":"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","sourcesContent":["/* -*- js-indent-level: 4; -*- */\n\n\"use strict\";\n\nvar well1024a = require('prng-well1024a');\n\n// ---- IF BROWSER, CUT ALONG LINE ----\nvar randy = (function () {\n    // ---- IF BROWSER, INSERT WELL-1024A HERE ----\n\n    function instantiate (initState) {\n        var entropy;\n        if (typeof window == \"undefined\") {\n            // NodeJs mode\n            var os = require(\"os\");\n            var crypto = require(\"crypto\");\n            var mu = process.memoryUsage();\n            var la = os.loadavg();\n            var crb = crypto.randomBytes(4);\n            var cryptoRand =\n                0x01000000 * crb[0] +\n                0x00010000 * crb[1] +\n                0x00000100 * crb[2] +\n                0x00000001 * crb[3];\n            var osUptime = os.uptime ? os.uptime() : 0;\n            var processUptime = process.uptime ? process.uptime() : osUptime;\n            entropy = [\n                cryptoRand,\n                (new Date()).getTime(),\n                process.pid,\n                Math.floor(processUptime * 16777216),\n                mu.rss,\n                mu.heapTotal,\n                mu.heapUsed,\n                Math.floor(osUptime * 16777216),\n                Math.floor(la[0] * 4294967296),\n                Math.floor(la[1] * 4294967296),\n                Math.floor(la[2] * 4294967296),\n                os.totalmem(),\n                os.freemem()\n            ];\n        } else {\n            // Browser mode\n            entropy = [\n                (new Date()).getTime() % 4294967296,\n                window.history.length,\n                window.outerHeight,\n                window.outerWidth,\n                window.screenX,\n                window.screenY,\n                window.screen.availWidth,\n                window.screen.availHeight,\n                window.screen.height,\n                window.screen.width\n            ];\n        }\n\n        var generator = well1024a(entropy);\n        var instance = attachFunctions(generator);\n        instance.instance = instantiate;\n\n        if (initState)\n            instance.setState(initState);\n        \n        return instance;\n    }\n        \n    /* Parameter getUInt32 must be a PRNG returning a random unsigned\n     * 32-bit integer. */\n    function attachFunctions (generator) {\n        var getUInt32 = generator.getUInt32;\n\n        /* Use _randInt32 if max < 2^32, _randInt53 otherwise.  If max\n         * is not specified, assume 2^32. */\n        function _randInt (max) {\n            if (max > 0xffffffff) // false for max=undefined|function\n                return _randInt53(max);\n            return _randInt32(max);\n        }\n        _randInt.defaultPrecision = 32;\n        \n        /* Use 53-bit precision.  If max is not specified, assume 2^53. */\n        function _randInt53 (max) {\n            var r = getUInt32() + (getUInt32() >>> 11) * 0x100000000;\n            if (typeof max === 'undefined')\n                return r;\n            return r % max;\n        }\n        _randInt53.defaultPrecision = 53;\n\n        /* Use 32-bit precision.  If max is not specified, assume 2^32. */\n        function _randInt32 (max) {\n            var r = getUInt32();\n            if (typeof max === 'undefined')\n                return r;\n            return r % max;\n        }\n        _randInt32.defaultPrecision = 32;\n\n        /* Use as little precision as is needed to generate a\n         * completely uniform distribution from the PRNG to the target\n         * range.  Can be very slow to execute.  If max is not\n         * specified, assume 2^53. */\n        function _randIntUniform (max) {\n            if (typeof max === 'undefined')\n                return _randInt53();\n            if (max == 0)\n                return 0;\n            var log2 = 0;\n            var mult = 1;\n            while (mult < max) {\n                log2 += 1;\n                mult *= 2;\n            }\n            for (var r = max; r >= max; r = getRandBits(log2));\n            return r;\n        }\n\n        /* Returns a random integer with precision 2^n, where n <= 53. */\n        function getRandBits (n) {\n            if (n === 0)\n                return 0;\n            function getBits32 () {\n                var r = _randInt32();\n                return r >>> (32 - n);\n            }\n            function getBits53 () {\n                var r1 = _randInt32() >>> (53 - n);\n                var r2 = _randInt32();\n                return r2 + (r1 >>> 11) * 0x100000000;\n            }\n            if (n > 32)\n                return getBits53();\n            return getBits32();\n        }\n\n        function wrapWithPrecision (baseRandInt) {\n            // Smallest float > 0 that we can uniformly generate with\n            // the random generator's precision.\n            var MIN_FLOAT = 1 / Math.pow(2, baseRandInt.defaultPrecision);\n\n            /* Returns a random integer i, such that min <= i < max.\n             *\n             * If only one parameter is supplied, it is assumed to be max,\n             * and min will be 0.\n             *\n             * If no parameters are supplied, min is assumed to be 0, and\n             * max is assumed to be 2^53.  I.e. bounded by largest\n             * possible integer value. */\n            function randInt (min, max, step) {\n                if (typeof(min) == 'undefined')\n                    return baseRandInt();\n                if (typeof(max) == 'undefined') {\n                    max = min;\n                    min = 0;\n                }\n                if (typeof step === 'undefined') {\n                    return min + baseRandInt(max - min);\n                }\n                var span = Math.ceil((max - min) / step);\n                return min + baseRandInt(span) * step;\n            }\n\n            /* Returns a random element from the array arr.  If arr is\n             * empty, throws an exception. */\n            function choice (arr) {\n                if (!arr.length)\n                    throw \"arr not an array of length > 0\";\n                return arr[baseRandInt(arr.length)];\n            }\n\n            /* Returns a shuffled copy of the array arr.  For\n             * algorithm details, see shuffleInplace. */\n            function shuffle (arr) {\n                var arrCopy = arr.slice();\n                shuffleInplace(arrCopy);\n                return arrCopy;\n            }\n\n            /* Shuffle the array arr in place.  Uses the Fisher-Yates\n             * shuffle, aka the Knuth shuffle. */\n            function shuffleInplace (arr) {\n                var j, tmp;\n                for (var i = arr.length - 1; i > 0; i--) {\n                    j = baseRandInt(i + 1);\n                    tmp = arr[i];\n                    arr[i] = arr[j];\n                    arr[j] = tmp;\n                }\n            }\n\n            /* Returns an array of length count, containing unique\n             * elements chosen from the array population.  Like a\n             * raffle draw.\n             *\n             * Mathematically equivalent to\n             * shuffle(population).slice(0, count), but more\n             * efficient.  Catches fire if count >\n             * population.length. */\n            function sample (population, count) {\n                var arr = population.slice();\n                var j, tmp, ln = arr.length;\n                for (var i = ln - 1; i > (ln - count - 1); i--) {\n                    j = baseRandInt(i + 1);\n                    tmp = arr[i];\n                    arr[i] = arr[j];\n                    arr[j] = tmp;\n                }\n                return arr.slice(ln - count);\n            }\n            \n            /* Returns a floating point number f such that 0.0 <= f < 1.0 */\n            function random () {\n                return MIN_FLOAT * baseRandInt();\n            }\n\n            /* Returns a floating point number f such that min <= f < max. */\n            function uniform (min, max) {\n                if (typeof min == 'undefined')\n                    min = 0;\n                if (typeof max == 'undefined') {\n                    max = min;\n                    min = 0;\n                }\n                return min + (random() * (max - min));\n            }\n\n            /* The triangular distribution is typically used as a\n             * subjective description of a population for which there\n             * is only limited sample data, and especially in cases\n             * where the relationship between variables is known but\n             * data is scarce (possibly because of the high cost of\n             * collection). It is based on a knowledge of the minimum\n             * and maximum and an \"inspired guess\" as to the modal\n             * value.\n             *\n             * http://en.wikipedia.org/wiki/Triangular_distribution */\n            function triangular (min, max, mode) {\n                if (typeof(min) == 'undefined')\n                    min = 0;\n                if (typeof(max) == 'undefined') {\n                    max = min;\n                    min = 0;\n                }\n                if (typeof(mode) == 'undefined')\n                    mode = min + (max - min) / 2;\n                var u = random();\n                if (u < (mode - min) / (max - min)) {\n                    return min + Math.sqrt(u * (max - min) * (mode - min));\n                } else {\n                    return max - Math.sqrt((1 - u) *\n                                           (max - min) * (max - mode));\n                }\n            }\n\n            return {\n                'randInt'       : randInt,\n                'choice'        : choice,\n                'shuffle'       : shuffle,\n                'shuffleInplace': shuffleInplace,\n                'sample'        : sample,\n                'random'        : random,\n                'uniform'       : uniform,\n                'triangular'    : triangular,\n                'getRandBits'   : getRandBits\n            };\n        }\n        \n        var fastFuns = wrapWithPrecision(_randInt, 0x100000000);\n        var goodFuns = wrapWithPrecision(_randInt53, 0x20000000000000);\n        var bestFuns = wrapWithPrecision(_randIntUniform, 0x20000000000000);\n        fastFuns.good = goodFuns;\n        fastFuns.best = bestFuns;\n        fastFuns.getState = generator.getState;\n        fastFuns.setState = generator.setState;\n        return fastFuns;\n    }\n\n    if (typeof module !== \"undefined\") {\n        module.exports = instantiate();\n    } else {\n        return instantiate();\n    }\n})();\n"]},"metadata":{},"sourceType":"script"}