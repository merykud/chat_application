{"ast":null,"code":"/*\nCopyright (c) 2011, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\nvar PorterStemmer = require('../stemmers/porter_stemmer'),\n    util = require('util'),\n    events = require('events');\n\nvar Classifier = function (classifier, stemmer) {\n  this.classifier = classifier;\n  this.docs = [];\n  this.features = {};\n  this.stemmer = stemmer || PorterStemmer;\n  this.lastAdded = 0;\n  this.events = new events.EventEmitter();\n};\n\nfunction addDocument(text, classification) {\n  if (typeof text === 'string') text = this.stemmer.tokenizeAndStem(text);\n\n  if (text.length === 0) {\n    // ignore empty documents\n    return;\n  }\n\n  this.docs.push({\n    label: classification,\n    text: text\n  });\n\n  for (var i = 0; i < text.length; i++) {\n    this.features[text[i]] = 1;\n  }\n}\n\nfunction removeDocument(text, classification) {\n  var docs = this.docs,\n      doc,\n      pos;\n\n  if (typeof text === 'string') {\n    text = this.stemmer.tokenizeAndStem(text);\n  }\n\n  for (var i = 0, ii = docs.length; i < ii; i++) {\n    doc = docs[i];\n\n    if (doc.text.join(' ') == text.join(' ') && doc.label == classification) {\n      pos = i;\n    }\n  } // Remove if there's a match\n\n\n  if (!isNaN(pos)) {\n    this.docs.splice(pos, 1);\n\n    for (var i = 0, ii = text.length; i < ii; i++) {\n      delete this.features[text[i]];\n    }\n  }\n}\n\nfunction textToFeatures(observation) {\n  var features = [];\n  if (typeof observation === 'string') observation = this.stemmer.tokenizeAndStem(observation);\n\n  for (var feature in this.features) {\n    if (observation.indexOf(feature) > -1) features.push(1);else features.push(0);\n  }\n\n  return features;\n}\n\nfunction train() {\n  var totalDocs = this.docs.length;\n\n  for (var i = this.lastAdded; i < totalDocs; i++) {\n    var features = this.textToFeatures(this.docs[i].text);\n    this.classifier.addExample(features, this.docs[i].label);\n    this.events.emit('trainedWithDocument', {\n      index: i,\n      total: totalDocs,\n      doc: this.docs[i]\n    });\n    this.lastAdded++;\n  }\n\n  this.events.emit('doneTraining', true);\n  this.classifier.train();\n}\n\nfunction retrain() {\n  this.classifier = new this.classifier.constructor();\n  this.lastAdded = 0;\n  this.train();\n}\n\nfunction getClassifications(observation) {\n  return this.classifier.getClassifications(this.textToFeatures(observation));\n}\n\nfunction classify(observation) {\n  return this.classifier.classify(this.textToFeatures(observation));\n}\n\nfunction restore(classifier, stemmer) {\n  classifier.stemmer = stemmer || PorterStemmer;\n  classifier.events = new events.EventEmitter();\n  return classifier;\n}\n\nfunction save(filename, callback) {\n  var data = JSON.stringify(this);\n\n  var fs = require('fs');\n\n  var classifier = this;\n  fs.writeFile(filename, data, 'utf8', function (err) {\n    if (callback) {\n      callback(err, err ? null : classifier);\n    }\n  });\n}\n\nfunction load(filename, callback) {\n  var fs = require('fs');\n\n  fs.readFile(filename, 'utf8', function (err, data) {\n    var classifier;\n\n    if (!err) {\n      classifier = JSON.parse(data);\n    }\n\n    if (callback) callback(err, classifier);\n  });\n}\n\nClassifier.prototype.addDocument = addDocument;\nClassifier.prototype.removeDocument = removeDocument;\nClassifier.prototype.train = train;\nClassifier.prototype.retrain = retrain;\nClassifier.prototype.classify = classify;\nClassifier.prototype.textToFeatures = textToFeatures;\nClassifier.prototype.save = save;\nClassifier.prototype.getClassifications = getClassifications;\nClassifier.restore = restore;\nClassifier.load = load;\nmodule.exports = Classifier;","map":{"version":3,"sources":["/Users/merjem/chat_application/react/node_modules/natural/lib/natural/classifiers/classifier.js"],"names":["PorterStemmer","require","util","events","Classifier","classifier","stemmer","docs","features","lastAdded","EventEmitter","addDocument","text","classification","tokenizeAndStem","length","push","label","i","removeDocument","doc","pos","ii","join","isNaN","splice","textToFeatures","observation","feature","indexOf","train","totalDocs","addExample","emit","index","total","retrain","constructor","getClassifications","classify","restore","save","filename","callback","data","JSON","stringify","fs","writeFile","err","load","readFile","parse","prototype","module","exports"],"mappings":"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","sourcesContent":["/*\nCopyright (c) 2011, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\nvar PorterStemmer = require('../stemmers/porter_stemmer'),\nutil = require('util'),\nevents = require('events');\n\nvar Classifier = function(classifier, stemmer) {\n    this.classifier = classifier;\n    this.docs = [];\n    this.features = {};\n    this.stemmer = stemmer || PorterStemmer;\n    this.lastAdded = 0;\n    this.events = new events.EventEmitter();\n};\n\nfunction addDocument(text, classification) {\n    if(typeof text === 'string')\n\ttext = this.stemmer.tokenizeAndStem(text);\n\n    if(text.length === 0) {\n        // ignore empty documents\n        return;\n    }\n\n    this.docs.push({\n\tlabel: classification,\n\ttext: text\n    });\n\n    for(var i = 0; i < text.length; i++) {\n\tthis.features[text[i]] = 1;\n    }\n}\n\nfunction removeDocument(text, classification) {\n  var docs = this.docs\n    , doc\n    , pos;\n\n  if (typeof text === 'string') {\n    text = this.stemmer.tokenizeAndStem(text);\n  }\n\n  for (var i = 0, ii = docs.length; i < ii; i++) {\n    doc = docs[i];\n    if (doc.text.join(' ') == text.join(' ') &&\n        doc.label == classification) {\n      pos = i;\n    }\n  }\n\n  // Remove if there's a match\n  if (!isNaN(pos)) {\n    this.docs.splice(pos, 1);\n\n    for (var i = 0, ii = text.length; i < ii; i++) {\n      delete this.features[text[i]];\n    }\n  }\n}\n\nfunction textToFeatures(observation) {\n    var features = [];\n\n    if(typeof observation === 'string')\n\tobservation = this.stemmer.tokenizeAndStem(observation);\n\n    for(var feature in this.features) {\n        if(observation.indexOf(feature) > -1)\n            features.push(1);\n        else\n            features.push(0);\n    }\n\n    return features;\n}\n\nfunction train() {\n    var totalDocs = this.docs.length;\n    for(var i = this.lastAdded; i < totalDocs; i++) {\n        var features = this.textToFeatures(this.docs[i].text);\n        this.classifier.addExample(features, this.docs[i].label);\n        this.events.emit('trainedWithDocument', {index: i, total: totalDocs, doc: this.docs[i]});\n        this.lastAdded++;\n    }\n    this.events.emit('doneTraining', true);\n    this.classifier.train();\n}\n\nfunction retrain() {\n  this.classifier = new (this.classifier.constructor)();\n  this.lastAdded = 0;\n  this.train();\n}\n\nfunction getClassifications(observation) {\n    return this.classifier.getClassifications(this.textToFeatures(observation));\n}\n\nfunction classify(observation) {\n    return this.classifier.classify(this.textToFeatures(observation));\n}\n\nfunction restore(classifier, stemmer) {\n    classifier.stemmer = stemmer || PorterStemmer;\n    classifier.events = new events.EventEmitter();\n    return classifier;\n}\n\nfunction save(filename, callback) {\n    var data = JSON.stringify(this);\n    var fs = require('fs');\n    var classifier = this;\n    fs.writeFile(filename, data, 'utf8', function(err) {\n        if(callback) {\n            callback(err, err ? null : classifier);\n        }\n    });\n}\n\nfunction load(filename, callback) {\n    var fs = require('fs');\n\n    fs.readFile(filename, 'utf8', function(err, data) {\n        var classifier;\n          \n        if(!err) {\n            classifier = JSON.parse(data);\n        }\n\n        if(callback)\n            callback(err, classifier);\n    });\n}\n\nClassifier.prototype.addDocument = addDocument;\nClassifier.prototype.removeDocument = removeDocument;\nClassifier.prototype.train = train;\nClassifier.prototype.retrain = retrain;\nClassifier.prototype.classify = classify;\nClassifier.prototype.textToFeatures = textToFeatures;\nClassifier.prototype.save = save;\nClassifier.prototype.getClassifications = getClassifications;\nClassifier.restore = restore;\nClassifier.load = load;\n\nmodule.exports = Classifier;\n"]},"metadata":{},"sourceType":"script"}